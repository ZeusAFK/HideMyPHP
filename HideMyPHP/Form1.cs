using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.IO.Compression;
using System.Security.Cryptography;
using System.Collections;
using zlib;
namespace HideMyPHP
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                if (!Directory.Exists(Application.StartupPath + "\\logs")) Directory.CreateDirectory(Application.StartupPath + "\\logs");
            }
            catch
            { }
            btnSelectAll_Click(sender, e);
            btnSelectAllVars_Click(sender, e);
        }

        Random rnd = new Random();

        private string Compress(string ToCompress)
        {
            byte[] bytData = Encoding.UTF8.GetBytes(ToCompress);
            MemoryStream ms = new MemoryStream();
            Stream s = new ZOutputStream(ms, rnd.Next(1, 9));
            s.Write(bytData, 0, bytData.Length);
            s.Close();
            byte[] compressedData = ms.ToArray();
            return Convert.ToBase64String(compressedData);
        }

        private void WriteLog(string line)
        {
            StreamWriter writer = new StreamWriter(Application.StartupPath + "\\logs\\log_" + GUID + ".txt", true);
            writer.WriteLine(line);
            writer.Close();
        }

        string GUID = DateTime.Now.ToString().Replace(':', '-').Replace('/', '-');

        ArrayList ReservedVars = new ArrayList();
        ArrayList ReservedFunctions = new ArrayList();
        ArrayList EncodedVars = new ArrayList();
        ArrayList EncodedFunctions = new ArrayList();
        ArrayList EncodedClasses = new ArrayList();
        ArrayList AlertVars = new ArrayList();

        string root_path = "";
        bool skip = false;

        private string Compress2(string text)
        {
            byte[] buffer = Encoding.UTF8.GetBytes(text);
            MemoryStream ms = new MemoryStream();
            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, true))
            {
                zip.Write(buffer, 0, buffer.Length);
            }

            ms.Position = 0;
            MemoryStream outStream = new MemoryStream();

            byte[] compressed = new byte[ms.Length];
            ms.Read(compressed, 0, compressed.Length);

            byte[] gzBuffer = new byte[compressed.Length + 4];
            System.Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length);
            System.Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);
            return Convert.ToBase64String(gzBuffer);
        }

        private void CopyAdditionalFiles(string directory)
        {
            if (Directory.Exists(directory))
            {
                string path = directory.Replace(root_path, txtOutDirectory.Text);
                if (!Directory.Exists(path))
                    Directory.CreateDirectory(path);
                string[] files = Directory.GetFiles(directory);
                foreach (string file in files)
                {
                    Application.DoEvents();
                    if (!lstFiles.CheckedItems.Contains(file))
                    {
                        if (!File.Exists(file.Replace(root_path, txtOutDirectory.Text)))
                            File.Copy(file, file.Replace(root_path, txtOutDirectory.Text));
                        lblStatusBarMessage.Text = "Coping aditional file " + file;
                    }
                }
                string[] directories = Directory.GetDirectories(directory);
                foreach (string tDirectory in directories)
                    CopyAdditionalFiles(tDirectory);
            }
        }

        private string AddCompression(string content)
        {
            content = Compress("?>" + content);
            content = "gzuncompress(base64_decode(\"" + content + "\"))";
            content = "<?php eval(" + content + "); ?>";
            return content;
        }

        private void StartObfuscation()
        {
            EncodedVars.Clear();
            EncodedFunctions.Clear();
            EncodedClasses.Clear();
            AlertVars.Clear();
            skip = false;

            lstLog.Items.Clear();
            tabControl1.SelectedTab = tabControl1.TabPages[2];
            lstLog.Items.Add(DateTime.Now.ToShortTimeString() + ": Obfuscation started.");
            lstLog.Items.Add(DateTime.Now.ToShortTimeString() + ": Indexing functions and variables..");
            foreach (string file in lstFiles.CheckedItems)
            {
                AnalizeContent(file);
                Application.DoEvents();
            }
            lstLog.Items.Add(DateTime.Now.ToShortTimeString() + ": Functions: " + EncodedFunctions.Count + " Variables: " + EncodedVars.Count);
            foreach (string file in lstFiles.CheckedItems)
            {
                lblStatusBarMessage.Text = "Obfuscating " + file;
                Application.DoEvents();
                StreamReader reader = new StreamReader(file);
                string content = "";
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine().Replace(" (", "(").Trim();
                    line = RemoveComments(line);
                    line = EncodeFunctions(line);
                    line = MatchFunctions(line);
                    line = EncodeVars(line);
                    content += line.Trim() + " ";
                }

                content = content + Environment.NewLine + "<!-- This script has been encripted with HideMyPHP v.1.0.0, for more information please visit http://www.zeusafk.net/ -->" + Environment.NewLine;
                content = AddCompression(AddCompression(content));
                content = "<?php /* This script has been encripted with HideMyPHP v.1.0.0, for more information please visit http://www.zeusafk.net/ */ ?>" + Environment.NewLine + content;

                string path = file.Substring(0, file.LastIndexOf("\\")).Replace(root_path, txtOutDirectory.Text);
                if (!Directory.Exists(path))
                    Directory.CreateDirectory(path);
                StreamWriter writer = new StreamWriter(File.Create(file.Replace(root_path, txtOutDirectory.Text)));
                writer.Write(content);
                writer.Close();
            }
            CopyAdditionalFiles(root_path);
            MessageBox.Show("Project obfuscation completed succefully.", "Obfuscation Completed", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            lblStatusBarMessage.Text = "Ready.";
            lstLog.Items.Add(DateTime.Now.ToShortTimeString() + ": Project obfuscation completed succefully.");
        }

        private void AnalizeContent(string file)
        {
            StreamReader reader = new StreamReader(file);
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine().Replace(" (", "(").Trim();
                EncodeVars(line);
                EncodeFunctions(line);
            }
            reader.Close();
        }

        private string AnalizeContent(StreamReader reader)
        {
            string content = "";
            
            while(!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                line = RemoveComments(line);
                line = EncodeVars(line);
                line = EncodeFunctions(line);
                content += line.Trim();
            }
            return content;
        }

        private string RemoveComments(string line)
        {
            if (line.Contains("//")) if (isComment(line))
                    line = line.Substring(0, line.IndexOf("//"));
            if (line.Contains("#")) if (isShellComment(line))
                    line = line.Substring(0, line.IndexOf("#"));
            if (line.Contains("/*"))
                skip = true;
            if (line.Contains("*/"))
            {
                skip = false;
                line = "";
            }
            if (skip)
                line = "";
            return line;
        }

        private bool isComment(string line)
        {
            while (line.Contains("//"))
            {
                string before = line.Substring(0, line.IndexOf("//"));
                int slashBefore = 0;
                while (before.Contains("\""))
                {
                    string trySlashEscape = before.IndexOf("\"") > 0 ? before.Substring(before.IndexOf("\"") - 1, 1) : "\"";

                    before = before.Remove(before.IndexOf("\""), 1);

                    if (trySlashEscape == "\\") continue;

                    slashBefore++;
                }
                if (slashBefore % 2 != 0) return false;
                before = line.Substring(0, line.IndexOf("//"));
                slashBefore = 0;
                while (before.Contains("\'"))
                {
                    string trySlashEscape = before.IndexOf("\'") > 0 ? before.Substring(before.IndexOf("\'") - 1, 1) : "\'";

                    before = before.Remove(before.IndexOf("\'"), 1);

                    if (trySlashEscape == "\\") continue;

                    slashBefore++;
                }
                if (slashBefore % 2 != 0) return false;
                line = line.Remove(line.IndexOf("//"));
            }
            return true;
        }

        private bool isShellComment(string line)
        {
            while (line.Contains("#"))
            {
                string before = line.Substring(0, line.IndexOf("#"));
                int slashBefore = 0;
                while (before.Contains("\""))
                {
                    before = before.Remove(before.IndexOf("\""), 1);
                    slashBefore++;
                }
                if (slashBefore % 2 != 0) return false;
                before = line.Substring(0, line.IndexOf("#"));
                slashBefore = 0;
                while (before.Contains("\'"))
                {
                    before = before.Remove(before.IndexOf("\'"), 1);
                    slashBefore++;
                }
                if (slashBefore % 2 != 0) return false;
                line = line.Remove(line.IndexOf("#"));
            }
            return true;
        }

        private string EncodeVars(string line)
        {
            while (line.Contains("$"))
            {
                if (line.Contains("($id);'><span>Marcar salida</span>"))
                    Console.WriteLine();
                Application.DoEvents();
                while (line.Contains("  ")) line = line.Replace("  ", " ");
                char[] chars = line.ToCharArray();
                int varIndex = line.IndexOf("$");
                int foundIndex = -1;
                for (int i = varIndex + 1; i < chars.Length; i++)
                {
                    if (!(chars[i] == '_' || char.IsLetter(chars[i]) || char.IsNumber(chars[i]) || ((int)chars[i] > 126 && (int)chars[i] < 256)))
                    {
                        foundIndex = i;
                        break;
                    }
                }
                if (foundIndex == -1) foundIndex = chars.Length;// -1;
                string varName = "";
                try { varName = line.Substring(varIndex + 1, foundIndex - varIndex - 1); }
                catch { foundIndex++; }
                if (!ReservedVars.Contains(varName) && !PHP_Functions.Contains(varName) && varName.Length > 0)
                {
                    if (!EncodedVars.Contains(varName))
                    {
                        EncodedVars.Add(varName);
                        lblStatusBarMessage.Text = "Indexing functions and variables. Functions: " + EncodedFunctions.Count + " Variables: " + EncodedVars.Count;
                        varName = "ZEUSAFK_ENCODED_VAR;" + varName;
                    }
                    else
                    {
                        string before = line.Substring(0, line.IndexOf("$"));
                        int slashBefore = 0;
                        while (before.Contains("\'"))
                        {
                            string trySlashEscape = before.IndexOf("\'") > 0 ? before.Substring(before.IndexOf("\'") - 1, 1) : "\'";

                            before = before.Remove(before.IndexOf("\'"), 1);

                            if (trySlashEscape == "\\") continue;

                            slashBefore++;
                        }

                        bool inSingleQuote = false;
                        if (slashBefore % 2 != 0) inSingleQuote = true;

                        slashBefore = 0;
                        while (before.Contains("\""))
                        {
                            string trySlashEscape = before.IndexOf("\"") > 0 ? before.Substring(before.IndexOf("\"") - 1, 1) : "\"";

                            before = before.Remove(before.IndexOf("\""), 1);

                            if (trySlashEscape == "\\") continue;

                            slashBefore++;
                        }
                        if ((slashBefore % 2 == 0 && inSingleQuote))
                        {
                            if (!AlertVars.Contains(varName))
                            {
                                AlertVars.Add(varName);
                                lstLog.Items.Add(DateTime.Now.ToShortTimeString() + ": Alert! The variable " + varName + " appears to be being used incorrectly, if problems occur with the obfuscated project try disabling it.");
                            }
                        }
                        WriteLog("Var: " + varName + " => " + HashCode(varName));
                        varName = "ZEUSAFK_ENCODED_VAR;" + HashCode(varName);
                    }
                }
                else
                    varName = "ZEUSAFK_ENCODED_VAR;" + varName;
                line = line.Remove(varIndex, foundIndex - varIndex);
                line = line.Insert(varIndex, varName);
            }
            line = line.Replace("ZEUSAFK_ENCODED_VAR;", "$");

            while (line.Contains("->"))
            {
                char[] chars = line.ToCharArray();
                int varIndex = line.IndexOf("->");
                int foundIndex = -1;
                for (int i = varIndex + 2; i < chars.Length; i++)
                {
                    if (!(chars[i] == '_' || char.IsLetter(chars[i]) || char.IsNumber(chars[i]) || ((int)chars[i] > 126 && (int)chars[i] < 256)))
                    {
                        foundIndex = i;
                        break;
                    }
                }
                if (foundIndex == -1) foundIndex = chars.Length;// -1;
                string varName = "";
                try { varName = line.Substring(varIndex + 2, foundIndex - varIndex - 2).Trim(); }
                catch { }
                if (!ReservedVars.Contains(varName) && !PHP_Functions.Contains(varName) && varName.Length > 0)
                {
                    if (EncodedVars.Contains(varName) && chars[foundIndex] != '(')
                    {
                        WriteLog("Var: " + varName + " => " + HashCode(varName));
                        varName = "ZEUSAFK_ENCODED_VAR;" + HashCode(varName);
                    }
                    else
                        varName = "ZEUSAFK_ENCODED_VAR;" + varName;
                }
                else
                    varName = "ZEUSAFK_ENCODED_VAR;" + varName;
                line = line.Remove(varIndex, foundIndex - varIndex);
                line = line.Insert(varIndex, varName);
            }
            line = line.Replace("ZEUSAFK_ENCODED_VAR;", "->");

            return line;
        }

        string EncodeFunctions(string line)
        {
            Application.DoEvents();
            while (line.ToLower().Contains("function "))
            {
                while (line.Contains("  ")) line = line.Replace("  ", " ");
                char[] chars = line.ToCharArray();
                int functionIndex = line.ToLower().IndexOf("function ") + 9;
                int foundIndex = -1;
                for (int i = functionIndex; i < chars.Length; i++)
                {
                    if (!(chars[i] == '_' || char.IsLetter(chars[i]) || char.IsNumber(chars[i]) || ((int)chars[i] > 126 && (int)chars[i] < 256)))
                    {
                        foundIndex = i;
                        break;
                    }
                }
                if (foundIndex == -1) foundIndex = chars.Length - 1;
                string functionName = "";
                try { functionName = line.Substring(functionIndex, foundIndex - functionIndex).Trim(); }
                catch { }
                if (!ReservedFunctions.Contains(functionName) && !PHP_Functions.Contains(functionName) && functionName.Length > 0)
                {
                    if (!EncodedFunctions.Contains(functionName))
                    {
                        EncodedFunctions.Add(functionName);
                        lblStatusBarMessage.Text = "Indexing functions and variables. Functions: " + EncodedFunctions.Count + " Variables: " + EncodedVars.Count;
                        functionName = "ZEUSAFK_ENCODED_FUNCTION;" + functionName;
                    }
                    else
                    {
                        WriteLog("Func: " + functionName + " => " + HashCode(functionName));
                        functionName = "ZEUSAFK_ENCODED_FUNCTION;" + HashCode(functionName);
                    }
                }
                else
                    functionName = "ZEUSAFK_ENCODED_FUNCTION;" + functionName;
                line = line.Remove(functionIndex - 9, foundIndex - functionIndex + 9);
                line = line.Insert(functionIndex - 9, functionName);
            }
            line = line.Replace("ZEUSAFK_ENCODED_FUNCTION;", "function ");
            return line;
        }

        private string MatchFunctions(string line)
        {
            Application.DoEvents();
            while (line.Contains("("))
            {
                while (line.Contains("  ")) line = line.Replace("  ", " ");
                if (line.Length == 1)
                    return line;
                char[] chars = line.ToCharArray();
                int funcIndex = line.IndexOf("(");
                int foundIndex = -1;
                for (int i = funcIndex - 1; i >= 0; i--)
                {
                    if (!(chars[i] == '_' || char.IsLetter(chars[i]) || char.IsNumber(chars[i]) || ((int)chars[i] > 126 && (int)chars[i] < 256)))
                    {
                        foundIndex = i;
                        break;
                    }
                }
                //if (foundIndex == -1) foundIndex = 0;
                string funcName = "";
                try
                {
                    funcName = line.Substring(foundIndex + 1, funcIndex - foundIndex - 1).Trim();
                }
                catch {
                    if (line.StartsWith("("))
                    {
                        line = line.Remove(0, 1);
                        line = line.Insert(0, "ZEUSAFK_ENCODED_FUNCTION;");
                        continue;
                    }
                }
                if (!ReservedFunctions.Contains(funcName) && !PHP_Functions.Contains(funcName) && funcName.Length > 0)
                {
                    if (EncodedFunctions.Contains(funcName))
                    {
                        WriteLog("Func: " + funcName + " => " + HashCode(funcName));
                        funcName = HashCode(funcName) + "ZEUSAFK_ENCODED_FUNCTION;";
                    }
                    else
                        funcName = funcName + "ZEUSAFK_ENCODED_FUNCTION;";
                }
                else
                    funcName = funcName + "ZEUSAFK_ENCODED_FUNCTION;";
                line = line.Remove(foundIndex + 1, funcIndex - foundIndex);
                line = line.Insert(foundIndex + 1, funcName);
            }
            line = line.Replace("ZEUSAFK_ENCODED_FUNCTION;", "(");
            return line;
        }

        public string HashCode(string str)
        {
            string rethash = GUID + str;
            try
            {
                SHA1 hash = SHA1.Create();
                ASCIIEncoding encoder = new ASCIIEncoding();
                hash.ComputeHash(encoder.GetBytes(rethash));
                rethash = Convert.ToBase64String(hash.Hash);
            }
            catch { }
            rethash = rethash.ToUpper().Replace("=", "").Replace("+", "").Replace("/", "");
            if (!char.IsLetter(rethash[0]))
            {
                rethash = rethash.Remove(0, 1);
                rethash = rethash.Insert(0, "A");
            }
            return rethash;
        }

        private void btnSelectDirectory_Click(object sender, EventArgs e)
        {
            FolderBrowserDialog browseFolder = new FolderBrowserDialog();
            if (browseFolder.ShowDialog() == DialogResult.OK)
            {
                root_path = browseFolder.SelectedPath;
                GUID = DateTime.Now.ToString().Replace(':', '-').Replace('/','-');
                txtDirectory.Text = root_path;
                lstFiles.Items.Clear();
                OpenDirectory(root_path);
                txtOutDirectory.Text = txtDirectory.Text + "_obfuscated(" + GUID + ")";
            }
        }

        private void OpenDirectory(string directory)
        {
            if (Directory.Exists(directory))
            {
                string[] files = Directory.GetFiles(directory);
                foreach (string file in files)
                {
                    FileInfo fInfo = new FileInfo(file);
                    if (fInfo.Extension == ".php")
                        lstFiles.Items.Add(file, true);
                }
                string[] directories = Directory.GetDirectories(directory);
                foreach (string tDirectory in directories)
                    OpenDirectory(tDirectory);
            }
        }

        private void btnStart_Click(object sender, EventArgs e)
        {
            while (!Directory.Exists(txtDirectory.Text))
                btnSelectDirectory_Click(sender, e);

            ReservedVars.Clear();
            foreach (string varName in lstPHPVars.CheckedItems)
                ReservedVars.Add(varName.Replace("$", ""));

            ReservedFunctions.Clear();
            foreach (string functionName in lstFunctions.CheckedItems)
                ReservedFunctions.Add(functionName);

            StartObfuscation();
        }

        private void btnSelectAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < lstFiles.Items.Count; i++)
                lstFiles.SetItemChecked(i, true);
        }

        private void btnUnselectAll_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < lstFiles.Items.Count; i++)
                lstFiles.SetItemChecked(i, false);
        }

        private static List<string> PHP_Functions = new List<string>(new string[]
		{
			"abs",
			"acos",
			"acosh",
			"addcslashes",
			"addslashes",
			"aggregate",
			"aggregate_info",
			"aggregate_methods",
			"aggregate_methods_by_list",
			"aggregate_methods_by_regexp",
			"aggregate_properties",
			"aggregate_properties_by_list",
			"aggregate_properties_by_regexp",
			"aggregation_info",
			"apache_child_terminate",
			"apache_get_modules",
			"apache_get_version",
			"apache_getenv",
			"apache_lookup_uri",
			"apache_note",
			"apache_request_headers",
			"apache_reset_timeout",
			"apache_response_headers",
			"apache_setenv",
			"apc_cache_info",
			"apc_clear_cache",
			"apc_define_constants",
			"apc_delete",
			"apc_fetch",
			"apc_load_constants",
			"apc_sma_info",
			"apc_store",
			"apd_breakpoint",
			"apd_callstack",
			"apd_clunk",
			"apd_continue",
			"apd_croak",
			"apd_dump_function_table",
			"apd_dump_persistent_resources",
			"apd_dump_regular_resources",
			"apd_echo",
			"apd_get_active_symbols",
			"apd_set_pprof_trace",
			"apd_set_session",
			"apd_set_session_trace",
			"apd_set_socket_session_trace",
			"array",
			"array_change_key_case",
			"array_chunk",
			"array_combine",
			"array_count_values",
			"array_diff",
			"array_diff_assoc",
			"array_diff_key",
			"array_diff_uassoc",
			"array_diff_ukey",
			"array_fill",
			"array_filter",
			"array_flip",
			"array_intersect",
			"array_intersect_assoc",
			"array_intersect_key",
			"array_intersect_uassoc",
			"array_intersect_ukey",
			"array_key_exists",
			"array_keys",
			"array_map",
			"array_merge",
			"array_merge_recursive",
			"array_multisort",
			"array_pad",
			"array_pop",
			"array_product",
			"array_push",
			"array_rand",
			"array_reduce",
			"array_reverse",
			"array_search",
			"array_shift",
			"array_slice",
			"array_splice",
			"array_sum",
			"array_udiff",
			"array_udiff_assoc",
			"array_udiff_uassoc",
			"array_uintersect",
			"array_uintersect_assoc",
			"array_uintersect_uassoc",
			"array_unique",
			"array_unshift",
			"array_values",
			"array_walk",
			"array_walk_recursive",
			"arrayiterator_current",
			"arrayiterator_key",
			"arrayiterator_next",
			"arrayiterator_rewind",
			"arrayiterator_seek",
			"arrayiterator_valid",
			"arrayobject_append",
			"arrayobject_construct",
			"arrayobject_count",
			"arrayobject_getiterator",
			"arrayobject_offsetexists",
			"arrayobject_offsetget",
			"arrayobject_offsetset",
			"arrayobject_offsetunset",
			"arsort",
			"ascii2ebcdic",
			"asin",
			"asinh",
			"asort",
			"aspell_check",
			"aspell_check_raw",
			"aspell_new",
			"aspell_suggest",
			"assert",
			"assert_options",
			"atan",
			"atan2",
			"atanh",
			"base64_decode",
			"base64_encode",
			"base_convert",
			"basename",
			"bcadd",
			"bccomp",
			"bcdiv",
			"bcmod",
			"bcmul",
			"bcompiler_load",
			"bcompiler_load_exe",
			"bcompiler_parse_class",
			"bcompiler_read",
			"bcompiler_write_class",
			"bcompiler_write_constant",
			"bcompiler_write_exe_footer",
			"bcompiler_write_file",
			"bcompiler_write_footer",
			"bcompiler_write_function",
			"bcompiler_write_functions_from_file",
			"bcompiler_write_header",
			"bcpow",
			"bcpowmod",
			"bcscale",
			"bcsqrt",
			"bcsub",
			"bin2hex",
			"bind_textdomain_codeset",
			"bindec",
			"bindtextdomain",
			"bzclose",
			"bzcompress",
			"bzdecompress",
			"bzerrno",
			"bzerror",
			"bzerrstr",
			"bzflush",
			"bzopen",
			"bzread",
			"bzwrite",
			"cachingiterator_hasnext",
			"cachingiterator_next",
			"cachingiterator_rewind",
			"cachingiterator_tostring",
			"cachingiterator_valid",
			"cachingrecursiveiterator_getchildren",
			"cachingrecursiveiterator_haschildren",
			"cal_days_in_month",
			"cal_from_jd",
			"cal_info",
			"cal_to_jd",
			"call_user_func",
			"call_user_func_array",
			"call_user_method",
			"call_user_method_array",
			"ccvs_add",
			"ccvs_auth",
			"ccvs_command",
			"ccvs_count",
			"ccvs_delete",
			"ccvs_done",
			"ccvs_init",
			"ccvs_lookup",
			"ccvs_new",
			"ccvs_report",
			"ccvs_return",
			"ccvs_reverse",
			"ccvs_sale",
			"ccvs_status",
			"ccvs_textvalue",
			"ccvs_void",
			"ceil",
			"chdir",
			"checkdate",
			"checkdnsrr",
			"chgrp",
			"chmod",
			"chop",
			"chown",
			"chr",
			"chroot",
			"chunk_split",
			"class_exists",
			"class_implements",
			"class_parents",
			"classkit_import",
			"classkit_method_add",
			"classkit_method_copy",
			"classkit_method_redefine",
			"classkit_method_remove",
			"classkit_method_rename",
			"clearstatcache",
			"closedir",
			"closelog",
			"com",
			"com_addref",
			"com_create_guid",
			"com_event_sink",
			"com_get",
			"com_get_active_object",
			"com_invoke",
			"com_isenum",
			"com_load",
			"com_load_typelib",
			"com_message_pump",
			"com_print_typeinfo",
			"com_propget",
			"com_propput",
			"com_propset",
			"com_release",
			"com_set",
			"compact",
			"connection_aborted",
			"connection_status",
			"connection_timeout",
			"constant",
			"convert_cyr_string",
			"convert_uudecode",
			"convert_uuencode",
			"copy",
			"cos",
			"cosh",
			"count",
			"count_chars",
			"cpdf_add_annotation",
			"cpdf_add_outline",
			"cpdf_arc",
			"cpdf_begin_text",
			"cpdf_circle",
			"cpdf_clip",
			"cpdf_close",
			"cpdf_closepath",
			"cpdf_closepath_fill_stroke",
			"cpdf_closepath_stroke",
			"cpdf_continue_text",
			"cpdf_curveto",
			"cpdf_end_text",
			"cpdf_fill",
			"cpdf_fill_stroke",
			"cpdf_finalize",
			"cpdf_finalize_page",
			"cpdf_global_set_document_limits",
			"cpdf_import_jpeg",
			"cpdf_lineto",
			"cpdf_moveto",
			"cpdf_newpath",
			"cpdf_open",
			"cpdf_output_buffer",
			"cpdf_page_init",
			"cpdf_place_inline_image",
			"cpdf_rect",
			"cpdf_restore",
			"cpdf_rlineto",
			"cpdf_rmoveto",
			"cpdf_rotate",
			"cpdf_rotate_text",
			"cpdf_save",
			"cpdf_save_to_file",
			"cpdf_scale",
			"cpdf_set_action_url",
			"cpdf_set_char_spacing",
			"cpdf_set_creator",
			"cpdf_set_current_page",
			"cpdf_set_font",
			"cpdf_set_font_directories",
			"cpdf_set_font_map_file",
			"cpdf_set_horiz_scaling",
			"cpdf_set_keywords",
			"cpdf_set_leading",
			"cpdf_set_page_animation",
			"cpdf_set_subject",
			"cpdf_set_text_matrix",
			"cpdf_set_text_pos",
			"cpdf_set_text_rendering",
			"cpdf_set_text_rise",
			"cpdf_set_title",
			"cpdf_set_viewer_preferences",
			"cpdf_set_word_spacing",
			"cpdf_setdash",
			"cpdf_setflat",
			"cpdf_setgray",
			"cpdf_setgray_fill",
			"cpdf_setgray_stroke",
			"cpdf_setlinecap",
			"cpdf_setlinejoin",
			"cpdf_setlinewidth",
			"cpdf_setmiterlimit",
			"cpdf_setrgbcolor",
			"cpdf_setrgbcolor_fill",
			"cpdf_setrgbcolor_stroke",
			"cpdf_show",
			"cpdf_show_xy",
			"cpdf_stringwidth",
			"cpdf_stroke",
			"cpdf_text",
			"cpdf_translate",
			"crack_check",
			"crack_closedict",
			"crack_getlastmessage",
			"crack_opendict",
			"crc32",
			"create_function",
			"crypt",
			"ctype_alnum",
			"ctype_alpha",
			"ctype_cntrl",
			"ctype_digit",
			"ctype_graph",
			"ctype_lower",
			"ctype_print",
			"ctype_punct",
			"ctype_space",
			"ctype_upper",
			"ctype_xdigit",
			"curl_close",
			"curl_copy_handle",
			"curl_errno",
			"curl_error",
			"curl_exec",
			"curl_getinfo",
			"curl_init",
			"curl_multi_add_handle",
			"curl_multi_close",
			"curl_multi_exec",
			"curl_multi_getcontent",
			"curl_multi_info_read",
			"curl_multi_init",
			"curl_multi_remove_handle",
			"curl_multi_select",
			"curl_setopt",
			"curl_setopt_array",
			"curl_version",
			"current",
			"cybercash_base64_decode",
			"cybercash_base64_encode",
			"cybercash_decr",
			"cybercash_encr",
			"cybermut_creerformulairecm",
			"cybermut_creerreponsecm",
			"cybermut_testmac",
			"cyrus_authenticate",
			"cyrus_bind",
			"cyrus_close",
			"cyrus_connect",
			"cyrus_query",
			"cyrus_unbind",
			"date",
			"date_default_timezone_get",
			"date_default_timezone_set",
			"date_sunrise",
			"date_sunset",
			"db2_autocommit",
			"db2_bind_param",
			"db2_client_info",
			"db2_close",
			"db2_column_privileges",
			"db2_columns",
			"db2_commit",
			"db2_conn_error",
			"db2_conn_errormsg",
			"db2_connect",
			"db2_cursor_type",
			"db2_exec",
			"db2_execute",
			"db2_fetch_array",
			"db2_fetch_assoc",
			"db2_fetch_both",
			"db2_fetch_object",
			"db2_fetch_row",
			"db2_field_display_size",
			"db2_field_name",
			"db2_field_num",
			"db2_field_precision",
			"db2_field_scale",
			"db2_field_type",
			"db2_field_width",
			"db2_foreign_keys",
			"db2_free_result",
			"db2_free_stmt",
			"db2_next_result",
			"db2_num_fields",
			"db2_num_rows",
			"db2_pconnect",
			"db2_prepare",
			"db2_primary_keys",
			"db2_procedure_columns",
			"db2_procedures",
			"db2_result",
			"db2_rollback",
			"db2_server_info",
			"db2_special_columns",
			"db2_statistics",
			"db2_stmt_error",
			"db2_stmt_errormsg",
			"db2_table_privileges",
			"db2_tables",
			"dba_close",
			"dba_delete",
			"dba_exists",
			"dba_fetch",
			"dba_firstkey",
			"dba_handlers",
			"dba_insert",
			"dba_key_split",
			"dba_list",
			"dba_nextkey",
			"dba_open",
			"dba_optimize",
			"dba_popen",
			"dba_replace",
			"dba_sync",
			"dbase_add_record",
			"dbase_close",
			"dbase_create",
			"dbase_delete_record",
			"dbase_get_header_info",
			"dbase_get_record",
			"dbase_get_record_with_names",
			"dbase_numfields",
			"dbase_numrecords",
			"dbase_open",
			"dbase_pack",
			"dbase_replace_record",
			"dblist",
			"dbmclose",
			"dbmdelete",
			"dbmexists",
			"dbmfetch",
			"dbmfirstkey",
			"dbminsert",
			"dbmnextkey",
			"dbmopen",
			"dbmreplace",
			"dbplus_add",
			"dbplus_aql",
			"dbplus_chdir",
			"dbplus_close",
			"dbplus_curr",
			"dbplus_errcode",
			"dbplus_errno",
			"dbplus_find",
			"dbplus_first",
			"dbplus_flush",
			"dbplus_freealllocks",
			"dbplus_freelock",
			"dbplus_freerlocks",
			"dbplus_getlock",
			"dbplus_getunique",
			"dbplus_info",
			"dbplus_last",
			"dbplus_lockrel",
			"dbplus_next",
			"dbplus_open",
			"dbplus_prev",
			"dbplus_rchperm",
			"dbplus_rcreate",
			"dbplus_rcrtexact",
			"dbplus_rcrtlike",
			"dbplus_resolve",
			"dbplus_restorepos",
			"dbplus_rkeys",
			"dbplus_ropen",
			"dbplus_rquery",
			"dbplus_rrename",
			"dbplus_rsecindex",
			"dbplus_runlink",
			"dbplus_rzap",
			"dbplus_savepos",
			"dbplus_setindex",
			"dbplus_setindexbynumber",
			"dbplus_sql",
			"dbplus_tcl",
			"dbplus_tremove",
			"dbplus_undo",
			"dbplus_undoprepare",
			"dbplus_unlockrel",
			"dbplus_unselect",
			"dbplus_update",
			"dbplus_xlockrel",
			"dbplus_xunlockrel",
			"dbx_close",
			"dbx_compare",
			"dbx_connect",
			"dbx_error",
			"dbx_escape_string",
			"dbx_fetch_row",
			"dbx_query",
			"dbx_sort",
			"dcgettext",
			"dcngettext",
			"deaggregate",
			"debug_backtrace",
			"debug_print_backtrace",
			"debug_zval_dump",
			"debugger_off",
			"debugger_on",
			"decbin",
			"dechex",
			"decoct",
			"define",
			"define_syslog_variables",
			"defined",
			"deg2rad",
			"delete",
			"dgettext",
			"die",
			"dio_close",
			"dio_fcntl",
			"dio_open",
			"dio_read",
			"dio_seek",
			"dio_stat",
			"dio_tcsetattr",
			"dio_truncate",
			"dio_write",
			"dir",
			"directoryiterator_construct",
			"directoryiterator_current",
			"directoryiterator_getatime",
			"directoryiterator_getchildren",
			"directoryiterator_getctime",
			"directoryiterator_getfilename",
			"directoryiterator_getgroup",
			"directoryiterator_getinode",
			"directoryiterator_getmtime",
			"directoryiterator_getowner",
			"directoryiterator_getpath",
			"directoryiterator_getpathname",
			"directoryiterator_getperms",
			"directoryiterator_getsize",
			"directoryiterator_gettype",
			"directoryiterator_isdir",
			"directoryiterator_isdot",
			"directoryiterator_isexecutable",
			"directoryiterator_isfile",
			"directoryiterator_islink",
			"directoryiterator_isreadable",
			"directoryiterator_iswritable",
			"directoryiterator_key",
			"directoryiterator_next",
			"directoryiterator_rewind",
			"directoryiterator_valid",
			"dirname",
			"disk_free_space",
			"disk_total_space",
			"diskfreespace",
			"dl",
			"dngettext",
			"dns_check_record",
			"dns_get_mx",
			"dns_get_record",
			"dom_domattr_construct",
			"dom_domattr_isid",
			"dom_domcharacterdata_appenddata",
			"dom_domcharacterdata_deletedata",
			"dom_domcharacterdata_insertdata",
			"dom_domcharacterdata_replacedata",
			"dom_domcharacterdata_substringdata",
			"dom_domcomment_construct",
			"dom_domdocument_construct",
			"dom_domdocument_createattribute",
			"dom_domdocument_createattributens",
			"dom_domdocument_createcdatasection",
			"dom_domdocument_createcomment",
			"dom_domdocument_createdocumentfragment",
			"dom_domdocument_createelement",
			"dom_domdocument_createelementns",
			"dom_domdocument_createentityreference",
			"dom_domdocument_createprocessinginstruction",
			"dom_domdocument_createtextnode",
			"dom_domdocument_getelementbyid",
			"dom_domdocument_getelementsbytagname",
			"dom_domdocument_getelementsbytagnamens",
			"dom_domdocument_importnode",
			"dom_domdocument_load",
			"dom_domdocument_loadhtml",
			"dom_domdocument_loadhtmlfile",
			"dom_domdocument_loadxml",
			"dom_domdocument_normalize",
			"dom_domdocument_relaxngvalidate",
			"dom_domdocument_relaxngvalidatesource",
			"dom_domdocument_save",
			"dom_domdocument_savehtml",
			"dom_domdocument_savehtmlfile",
			"dom_domdocument_savexml",
			"dom_domdocument_schemavalidate",
			"dom_domdocument_schemavalidatesource",
			"dom_domdocument_validate",
			"dom_domdocument_xinclude",
			"dom_domdocumentfragment.appendxml",
			"dom_domelement_construct",
			"dom_domelement_getattribute",
			"dom_domelement_getattributenode",
			"dom_domelement_getattributenodens",
			"dom_domelement_getattributens",
			"dom_domelement_getelementsbytagname",
			"dom_domelement_getelementsbytagnamens",
			"dom_domelement_hasattribute",
			"dom_domelement_hasattributens",
			"dom_domelement_removeattribute",
			"dom_domelement_removeattributenode",
			"dom_domelement_removeattributens",
			"dom_domelement_setattribute",
			"dom_domelement_setattributenode",
			"dom_domelement_setattributenodens",
			"dom_domelement_setattributens",
			"dom_domentityreference_construct",
			"dom_domimplementation_construct",
			"dom_domimplementation_createdocument",
			"dom_domimplementation_createdocumenttype",
			"dom_domimplementation_hasfeature",
			"dom_domnamednodemap_getnameditem",
			"dom_domnamednodemap_getnameditemns",
			"dom_domnamednodemap_item",
			"dom_domnode_appendchild",
			"dom_domnode_clonenode",
			"dom_domnode_hasattributes",
			"dom_domnode_haschildnodes",
			"dom_domnode_insertbefore",
			"dom_domnode_issamenode",
			"dom_domnode_issupported",
			"dom_domnode_lookupnamespaceuri",
			"dom_domnode_lookupprefix",
			"dom_domnode_normalize",
			"dom_domnode_removechild",
			"dom_domnode_replacechild",
			"dom_domnodelist_item",
			"dom_domprocessinginstruction_construct",
			"dom_domtext_construct",
			"dom_domtext_iswhitespaceinelementcontent",
			"dom_domtext_splittext",
			"dom_domxpath_construct",
			"dom_domxpath_evaluate",
			"dom_domxpath_query",
			"dom_domxpath_registernamespace",
			"dom_import_simplexml",
			"domattribute_name",
			"domattribute_set_value",
			"domattribute_specified",
			"domattribute_value",
			"domdocument_add_root",
			"domdocument_create_attribute",
			"domdocument_create_cdata_section",
			"domdocument_create_comment",
			"domdocument_create_element",
			"domdocument_create_element_ns",
			"domdocument_create_entity_reference",
			"domdocument_create_processing_instruction",
			"domdocument_create_text_node",
			"domdocument_doctype",
			"domdocument_document_element",
			"domdocument_dump_file",
			"domdocument_dump_mem",
			"domdocument_get_element_by_id",
			"domdocument_get_elements_by_tagname",
			"domdocument_html_dump_mem",
			"domdocument_xinclude",
			"domdocumenttype_entities",
			"domdocumenttype_internal_subset",
			"domdocumenttype_name",
			"domdocumenttype_notations",
			"domdocumenttype_public_id",
			"domdocumenttype_system_id",
			"domelement_get_attribute",
			"domelement_get_attribute_node",
			"domelement_get_elements_by_tagname",
			"domelement_has_attribute",
			"domelement_remove_attribute",
			"domelement_set_attribute",
			"domelement_set_attribute_node",
			"domelement_tagname",
			"domnode_add_namespace",
			"domnode_append_child",
			"domnode_append_sibling",
			"domnode_attributes",
			"domnode_child_nodes",
			"domnode_clone_node",
			"domnode_dump_node",
			"domnode_first_child",
			"domnode_get_content",
			"domnode_has_attributes",
			"domnode_has_child_nodes",
			"domnode_insert_before",
			"domnode_is_blank_node",
			"domnode_last_child",
			"domnode_next_sibling",
			"domnode_node_name",
			"domnode_node_type",
			"domnode_node_value",
			"domnode_owner_document",
			"domnode_parent_node",
			"domnode_prefix",
			"domnode_previous_sibling",
			"domnode_remove_child",
			"domnode_replace_child",
			"domnode_replace_node",
			"domnode_set_content",
			"domnode_set_name",
			"domnode_set_namespace",
			"domnode_unlink_node",
			"domprocessinginstruction_data",
			"domprocessinginstruction_target",
			"domxml_new_doc",
			"domxml_open_file",
			"domxml_open_mem",
			"domxml_version",
			"domxml_xmltree",
			"domxml_xslt_stylesheet",
			"domxml_xslt_stylesheet_doc",
			"domxml_xslt_stylesheet_file",
			"domxml_xslt_version",
			"domxsltstylesheet_process",
			"domxsltstylesheet_result_dump_file",
			"domxsltstylesheet_result_dump_mem",
			"dotnet",
			"dotnet_load",
			"doubleval",
			"each",
			"easter_date",
			"easter_days",
			"ebcdic2ascii",
			"echo",
			"empty",
			"end",
			"ereg",
			"ereg_replace",
			"eregi",
			"eregi_replace",
			"error_log",
			"error_reporting",
			"escapeshellarg",
			"escapeshellcmd",
			"eval",
			"exec",
			"exif_imagetype",
			"exif_read_data",
			"exif_tagname",
			"exif_thumbnail",
			"exit",
			"exp",
			"expect_expectl",
			"expect_popen",
			"explode",
			"expm1",
			"extension_loaded",
			"extract",
			"ezmlm_hash",
			"fam_cancel_monitor",
			"fam_close",
			"fam_monitor_collection",
			"fam_monitor_directory",
			"fam_monitor_file",
			"fam_next_event",
			"fam_open",
			"fam_pending",
			"fam_resume_monitor",
			"fam_suspend_monitor",
			"fbsql_affected_rows",
			"fbsql_autocommit",
			"fbsql_blob_size",
			"fbsql_change_user",
			"fbsql_clob_size",
			"fbsql_close",
			"fbsql_commit",
			"fbsql_connect",
			"fbsql_create_blob",
			"fbsql_create_clob",
			"fbsql_create_db",
			"fbsql_data_seek",
			"fbsql_database",
			"fbsql_database_password",
			"fbsql_db_query",
			"fbsql_db_status",
			"fbsql_drop_db",
			"fbsql_errno",
			"fbsql_error",
			"fbsql_fetch_array",
			"fbsql_fetch_assoc",
			"fbsql_fetch_field",
			"fbsql_fetch_lengths",
			"fbsql_fetch_object",
			"fbsql_fetch_row",
			"fbsql_field_flags",
			"fbsql_field_len",
			"fbsql_field_name",
			"fbsql_field_seek",
			"fbsql_field_table",
			"fbsql_field_type",
			"fbsql_free_result",
			"fbsql_get_autostart_info",
			"fbsql_hostname",
			"fbsql_insert_id",
			"fbsql_list_dbs",
			"fbsql_list_fields",
			"fbsql_list_tables",
			"fbsql_next_result",
			"fbsql_num_fields",
			"fbsql_num_rows",
			"fbsql_password",
			"fbsql_pconnect",
			"fbsql_query",
			"fbsql_read_blob",
			"fbsql_read_clob",
			"fbsql_result",
			"fbsql_rollback",
			"fbsql_select_db",
			"fbsql_set_lob_mode",
			"fbsql_set_password",
			"fbsql_set_transaction",
			"fbsql_start_db",
			"fbsql_stop_db",
			"fbsql_tablename",
			"fbsql_username",
			"fbsql_warnings",
			"fclose",
			"fdf_add_doc_javascript",
			"fdf_add_template",
			"fdf_close",
			"fdf_create",
			"fdf_enum_values",
			"fdf_errno",
			"fdf_error",
			"fdf_get_ap",
			"fdf_get_attachment",
			"fdf_get_encoding",
			"fdf_get_file",
			"fdf_get_flags",
			"fdf_get_opt",
			"fdf_get_status",
			"fdf_get_value",
			"fdf_get_version",
			"fdf_header",
			"fdf_next_field_name",
			"fdf_open",
			"fdf_open_string",
			"fdf_remove_item",
			"fdf_save",
			"fdf_save_string",
			"fdf_set_ap",
			"fdf_set_encoding",
			"fdf_set_file",
			"fdf_set_flags",
			"fdf_set_javascript_action",
			"fdf_set_on_import_javascript",
			"fdf_set_opt",
			"fdf_set_status",
			"fdf_set_submit_form_action",
			"fdf_set_target_frame",
			"fdf_set_value",
			"fdf_set_version",
			"feof",
			"fflush",
			"fgetc",
			"fgetcsv",
			"fgets",
			"fgetss",
			"file",
			"file_exists",
			"file_get_contents",
			"file_put_contents",
			"fileatime",
			"filectime",
			"filegroup",
			"fileinode",
			"filemtime",
			"fileowner",
			"fileperms",
			"filepro",
			"filepro_fieldcount",
			"filepro_fieldname",
			"filepro_fieldtype",
			"filepro_fieldwidth",
			"filepro_retrieve",
			"filepro_rowcount",
			"filesize",
			"filetype",
			"filter_data",
			"filteriterator_current",
			"filteriterator_getinneriterator",
			"filteriterator_key",
			"filteriterator_next",
			"filteriterator_rewind",
			"filteriterator_valid",
			"finfo_buffer",
			"finfo_close",
			"finfo_file",
			"finfo_open",
			"finfo_set_flags",
			"floatval",
			"flock",
			"floor",
			"flush",
			"fmod",
			"fnmatch",
			"fopen",
            "for",
			"fpassthru",
			"fprintf",
			"fputcsv",
			"fputs",
			"fread",
			"frenchtojd",
			"fribidi_log2vis",
			"fscanf",
			"fseek",
			"fsockopen",
			"fstat",
			"ftell",
			"ftok",
			"ftp_alloc",
			"ftp_cdup",
			"ftp_chdir",
			"ftp_chmod",
			"ftp_close",
			"ftp_connect",
			"ftp_delete",
			"ftp_exec",
			"ftp_fget",
			"ftp_fput",
			"ftp_get",
			"ftp_get_option",
			"ftp_login",
			"ftp_mdtm",
			"ftp_mkdir",
			"ftp_nb_continue",
			"ftp_nb_fget",
			"ftp_nb_fput",
			"ftp_nb_get",
			"ftp_nb_put",
			"ftp_nlist",
			"ftp_pasv",
			"ftp_put",
			"ftp_pwd",
			"ftp_quit",
			"ftp_raw",
			"ftp_rawlist",
			"ftp_rename",
			"ftp_rmdir",
			"ftp_set_option",
			"ftp_site",
			"ftp_size",
			"ftp_ssl_connect",
			"ftp_systype",
			"ftruncate",
			"func_get_arg",
			"func_get_args",
			"func_num_args",
			"function_exists",
			"fwrite",
			"gd_info",
			"get_browser",
			"get_cfg_var",
			"get_class",
			"get_class_methods",
			"get_class_vars",
			"get_current_user",
			"get_declared_classes",
			"get_declared_interfaces",
			"get_defined_constants",
			"get_defined_functions",
			"get_defined_vars",
			"get_extension_funcs",
			"get_headers",
			"get_html_translation_table",
			"get_include_path",
			"get_included_files",
			"get_loaded_extensions",
			"get_magic_quotes_gpc",
			"get_magic_quotes_runtime",
			"get_meta_tags",
			"get_object_vars",
			"get_parent_class",
			"get_required_files",
			"get_resource_type",
			"getallheaders",
			"getcwd",
			"getdate",
			"getenv",
			"gethostbyaddr",
			"gethostbyname",
			"gethostbynamel",
			"getimagesize",
			"getlastmod",
			"getmxrr",
			"getmygid",
			"getmyinode",
			"getmypid",
			"getmyuid",
			"getopt",
			"getprotobyname",
			"getprotobynumber",
			"getrandmax",
			"getrusage",
			"getservbyname",
			"getservbyport",
			"gettext",
			"gettimeofday",
			"gettype",
			"glob",
			"gmdate",
			"gmmktime",
			"gmp_abs",
			"gmp_add",
			"gmp_and",
			"gmp_clrbit",
			"gmp_cmp",
			"gmp_com",
			"gmp_div",
			"gmp_div_q",
			"gmp_div_qr",
			"gmp_div_r",
			"gmp_divexact",
			"gmp_fact",
			"gmp_gcd",
			"gmp_gcdext",
			"gmp_hamdist",
			"gmp_init",
			"gmp_intval",
			"gmp_invert",
			"gmp_jacobi",
			"gmp_legendre",
			"gmp_mod",
			"gmp_mul",
			"gmp_neg",
			"gmp_nextprime",
			"gmp_or",
			"gmp_perfect_square",
			"gmp_popcount",
			"gmp_pow",
			"gmp_powm",
			"gmp_prob_prime",
			"gmp_random",
			"gmp_scan0",
			"gmp_scan1",
			"gmp_setbit",
			"gmp_sign",
			"gmp_sqrt",
			"gmp_sqrtrem",
			"gmp_strval",
			"gmp_sub",
			"gmp_xor",
			"gmstrftime",
			"gnupg_adddecryptkey",
			"gnupg_addencryptkey",
			"gnupg_addsignkey",
			"gnupg_cleardecryptkeys",
			"gnupg_clearencryptkeys",
			"gnupg_clearsignkeys",
			"gnupg_decrypt",
			"gnupg_decryptverify",
			"gnupg_encrypt",
			"gnupg_encryptsign",
			"gnupg_export",
			"gnupg_geterror",
			"gnupg_getprotocol",
			"gnupg_import",
			"gnupg_keyinfo",
			"gnupg_setarmor",
			"gnupg_seterrormode",
			"gnupg_setsignmode",
			"gnupg_sign",
			"gnupg_verify",
			"gopher_parsedir",
			"gregoriantojd",
			"gzclose",
			"gzcompress",
			"gzdeflate",
			"gzencode",
			"gzeof",
			"gzfile",
			"gzgetc",
			"gzgets",
			"gzgetss",
			"gzinflate",
			"gzopen",
			"gzpassthru",
			"gzputs",
			"gzread",
			"gzrewind",
			"gzseek",
			"gztell",
			"gzuncompress",
			"gzwrite",
			"halt_compiler",
			"hash",
			"hash_algos",
			"hash_file",
			"hash_final",
			"hash_hmac",
			"hash_hmac_file",
			"hash_init",
			"hash_update",
			"hash_update_file",
			"hash_update_stream",
			"header",
			"headers_list",
			"headers_sent",
			"hebrev",
			"hebrevc",
			"hexdec",
			"highlight_file",
			"highlight_string",
			"html_entity_decode",
			"htmlentities",
			"htmlspecialchars",
			"htmlspecialchars_decode",
			"http_build_cookie",
			"http_build_query",
			"http_build_str",
			"http_build_url",
			"http_cache_etag",
			"http_cache_last_modified",
			"http_chunked_decode",
			"http_date",
			"http_deflate",
			"http_get",
			"http_get_request_body",
			"http_get_request_body_stream",
			"http_get_request_headers",
			"http_head",
			"http_inflate",
			"http_match_etag",
			"http_match_modified",
			"http_match_request_header",
			"http_negotiate_charset",
			"http_negotiate_ctype",
			"http_negotiate_language",
			"http_parse_cookie",
			"http_parse_headers",
			"http_parse_message",
			"http_parse_params",
			"http_post_data",
			"http_post_fields",
			"http_put_data",
			"http_put_file",
			"http_put_stream",
			"http_redirect",
			"http_request",
			"http_request_body_encode",
			"http_request_method_exists",
			"http_request_method_name",
			"http_request_method_register",
			"http_request_method_unregister",
			"http_send_content_disposition",
			"http_send_content_type",
			"http_send_data",
			"http_send_file",
			"http_send_last_modified",
			"http_send_status",
			"http_send_stream",
			"http_support",
			"http_throttle",
			"httpdeflatestream_construct",
			"httpdeflatestream_finish",
			"httpdeflatestream_flush",
			"httpdeflatestream_update",
			"httpinflatestream_construct",
			"httpinflatestream_finish",
			"httpinflatestream_flush",
			"httpinflatestream_update",
			"httpmessage_addheaders",
			"httpmessage_construct",
			"httpmessage_detach",
			"httpmessage_fromstring",
			"httpmessage_getbody",
			"httpmessage_getheader",
			"httpmessage_getheaders",
			"httpmessage_gethttpversion",
			"httpmessage_getparentmessage",
			"httpmessage_getrequestmethod",
			"httpmessage_getrequesturl",
			"httpmessage_getresponsecode",
			"httpmessage_getresponsestatus",
			"httpmessage_gettype",
			"httpmessage_guesscontenttype",
			"httpmessage_prepend",
			"httpmessage_reverse",
			"httpmessage_send",
			"httpmessage_setbody",
			"httpmessage_setheaders",
			"httpmessage_sethttpversion",
			"httpmessage_setrequestmethod",
			"httpmessage_setrequesturl",
			"httpmessage_setresponsecode",
			"httpmessage_setresponsestatus",
			"httpmessage_settype",
			"httpmessage_tomessagetypeobject",
			"httpmessage_tostring",
			"httpquerystring_construct",
			"httpquerystring_get",
			"httpquerystring_mod",
			"httpquerystring_set",
			"httpquerystring_singleton",
			"httpquerystring_toarray",
			"httpquerystring_tostring",
			"httpquerystring_xlate",
			"httprequest_addcookies",
			"httprequest_addheaders",
			"httprequest_addpostfields",
			"httprequest_addpostfile",
			"httprequest_addputdata",
			"httprequest_addquerydata",
			"httprequest_addrawpostdata",
			"httprequest_addssloptions",
			"httprequest_clearhistory",
			"httprequest_construct",
			"httprequest_enablecookies",
			"httprequest_getcontenttype",
			"httprequest_getcookies",
			"httprequest_getheaders",
			"httprequest_gethistory",
			"httprequest_getmethod",
			"httprequest_getoptions",
			"httprequest_getpostfields",
			"httprequest_getpostfiles",
			"httprequest_getputdata",
			"httprequest_getputfile",
			"httprequest_getquerydata",
			"httprequest_getrawpostdata",
			"httprequest_getrawrequestmessage",
			"httprequest_getrawresponsemessage",
			"httprequest_getrequestmessage",
			"httprequest_getresponsebody",
			"httprequest_getresponsecode",
			"httprequest_getresponsecookies",
			"httprequest_getresponsedata",
			"httprequest_getresponseheader",
			"httprequest_getresponseinfo",
			"httprequest_getresponsemessage",
			"httprequest_getresponsestatus",
			"httprequest_getsslotpions",
			"httprequest_geturl",
			"httprequest_resetcookies",
			"httprequest_send",
			"httprequest_setcontenttype",
			"httprequest_setcookies",
			"httprequest_setheaders",
			"httprequest_setmethod",
			"httprequest_setoptions",
			"httprequest_setpostfields",
			"httprequest_setpostfiles",
			"httprequest_setputdata",
			"httprequest_setputfile",
			"httprequest_setquerydata",
			"httprequest_setrawpostdata",
			"httprequest_setssloptions",
			"httprequest_seturl",
			"httprequestpool_attach",
			"httprequestpool_construct",
			"httprequestpool_destruct",
			"httprequestpool_detach",
			"httprequestpool_getattachedrequests",
			"httprequestpool_getfinishedrequests",
			"httprequestpool_reset",
			"httprequestpool_send",
			"httprequestpool_socketperform",
			"httprequestpool_socketselect",
			"httpresponse_capture",
			"httpresponse_getbuffersize",
			"httpresponse_getcache",
			"httpresponse_getcachecontrol",
			"httpresponse_getcontentdisposition",
			"httpresponse_getcontenttype",
			"httpresponse_getdata",
			"httpresponse_getetag",
			"httpresponse_getfile",
			"httpresponse_getgzip",
			"httpresponse_getheader",
			"httpresponse_getlastmodified",
			"httpresponse_getstream",
			"httpresponse_getthrottledelay",
			"httpresponse_guesscontenttype",
			"httpresponse_send",
			"httpresponse_setbuffersize",
			"httpresponse_setcache",
			"httpresponse_setcachecontrol",
			"httpresponse_setcontentdisposition",
			"httpresponse_setcontenttype",
			"httpresponse_setdata",
			"httpresponse_setetag",
			"httpresponse_setfile",
			"httpresponse_setgzip",
			"httpresponse_setheader",
			"httpresponse_setlastmodified",
			"httpresponse_setstream",
			"httpresponse_setthrottledelay",
			"hw_array2objrec",
			"hw_changeobject",
			"hw_children",
			"hw_childrenobj",
			"hw_close",
			"hw_connect",
			"hw_connection_info",
			"hw_cp",
			"hw_deleteobject",
			"hw_docbyanchor",
			"hw_docbyanchorobj",
			"hw_document_attributes",
			"hw_document_bodytag",
			"hw_document_content",
			"hw_document_setcontent",
			"hw_document_size",
			"hw_dummy",
			"hw_edittext",
			"hw_error",
			"hw_errormsg",
			"hw_free_document",
			"hw_getanchors",
			"hw_getanchorsobj",
			"hw_getandlock",
			"hw_getchildcoll",
			"hw_getchildcollobj",
			"hw_getchilddoccoll",
			"hw_getchilddoccollobj",
			"hw_getobject",
			"hw_getobjectbyquery",
			"hw_getobjectbyquerycoll",
			"hw_getobjectbyquerycollobj",
			"hw_getobjectbyqueryobj",
			"hw_getparents",
			"hw_getparentsobj",
			"hw_getrellink",
			"hw_getremote",
			"hw_getremotechildren",
			"hw_getsrcbydestobj",
			"hw_gettext",
			"hw_getusername",
			"hw_identify",
			"hw_incollections",
			"hw_info",
			"hw_inscoll",
			"hw_insdoc",
			"hw_insertanchors",
			"hw_insertdocument",
			"hw_insertobject",
			"hw_mapid",
			"hw_modifyobject",
			"hw_mv",
			"hw_new_document",
			"hw_objrec2array",
			"hw_output_document",
			"hw_pconnect",
			"hw_pipedocument",
			"hw_root",
			"hw_setlinkroot",
			"hw_stat",
			"hw_unlock",
			"hw_who",
			"hwapi_attribute",
			"hwapi_attribute_key",
			"hwapi_attribute_langdepvalue",
			"hwapi_attribute_value",
			"hwapi_attribute_values",
			"hwapi_checkin",
			"hwapi_checkout",
			"hwapi_children",
			"hwapi_content",
			"hwapi_content_mimetype",
			"hwapi_content_read",
			"hwapi_copy",
			"hwapi_dbstat",
			"hwapi_dcstat",
			"hwapi_dstanchors",
			"hwapi_dstofsrcanchor",
			"hwapi_error_count",
			"hwapi_error_reason",
			"hwapi_find",
			"hwapi_ftstat",
			"hwapi_hgcsp",
			"hwapi_hwstat",
			"hwapi_identify",
			"hwapi_info",
			"hwapi_insert",
			"hwapi_insertanchor",
			"hwapi_insertcollection",
			"hwapi_insertdocument",
			"hwapi_link",
			"hwapi_lock",
			"hwapi_move",
			"hwapi_new_content",
			"hwapi_object",
			"hwapi_object_assign",
			"hwapi_object_attreditable",
			"hwapi_object_count",
			"hwapi_object_insert",
			"hwapi_object_new",
			"hwapi_object_remove",
			"hwapi_object_title",
			"hwapi_object_value",
			"hwapi_objectbyanchor",
			"hwapi_parents",
			"hwapi_reason_description",
			"hwapi_reason_type",
			"hwapi_remove",
			"hwapi_replace",
			"hwapi_setcommittedversion",
			"hwapi_srcanchors",
			"hwapi_srcsofdst",
			"hwapi_unlock",
			"hwapi_user",
			"hwapi_userlist",
			"hypot",
			"i18n_loc_get_default",
			"i18n_loc_set_default",
			"ibase_add_user",
			"ibase_affected_rows",
			"ibase_backup",
			"ibase_blob_add",
			"ibase_blob_cancel",
			"ibase_blob_close",
			"ibase_blob_create",
			"ibase_blob_echo",
			"ibase_blob_get",
			"ibase_blob_import",
			"ibase_blob_info",
			"ibase_blob_open",
			"ibase_close",
			"ibase_commit",
			"ibase_commit_ret",
			"ibase_connect",
			"ibase_db_info",
			"ibase_delete_user",
			"ibase_drop_db",
			"ibase_errcode",
			"ibase_errmsg",
			"ibase_execute",
			"ibase_fetch_assoc",
			"ibase_fetch_object",
			"ibase_fetch_row",
			"ibase_field_info",
			"ibase_free_event_handler",
			"ibase_free_query",
			"ibase_free_result",
			"ibase_gen_id",
			"ibase_maintain_db",
			"ibase_modify_user",
			"ibase_name_result",
			"ibase_num_fields",
			"ibase_num_params",
			"ibase_param_info",
			"ibase_pconnect",
			"ibase_prepare",
			"ibase_query",
			"ibase_restore",
			"ibase_rollback",
			"ibase_rollback_ret",
			"ibase_server_info",
			"ibase_service_attach",
			"ibase_service_detach",
			"ibase_set_event_handler",
			"ibase_timefmt",
			"ibase_trans",
			"ibase_wait_event",
			"icap_close",
			"icap_create_calendar",
			"icap_delete_calendar",
			"icap_delete_event",
			"icap_fetch_event",
			"icap_list_alarms",
			"icap_list_events",
			"icap_open",
			"icap_rename_calendar",
			"icap_reopen",
			"icap_snooze",
			"icap_store_event",
			"iconv",
			"iconv_get_encoding",
			"iconv_mime_decode",
			"iconv_mime_decode_headers",
			"iconv_mime_encode",
			"iconv_set_encoding",
			"iconv_strlen",
			"iconv_strpos",
			"iconv_strrpos",
			"iconv_substr",
			"id3_get_frame_long_name",
			"id3_get_frame_short_name",
			"id3_get_genre_id",
			"id3_get_genre_list",
			"id3_get_genre_name",
			"id3_get_tag",
			"id3_get_version",
			"id3_remove_tag",
			"id3_set_tag",
			"idate",
            "if",
			"ifx_affected_rows",
			"ifx_blobinfile_mode",
			"ifx_byteasvarchar",
			"ifx_close",
			"ifx_connect",
			"ifx_copy_blob",
			"ifx_create_blob",
			"ifx_create_char",
			"ifx_do",
			"ifx_error",
			"ifx_errormsg",
			"ifx_fetch_row",
			"ifx_fieldproperties",
			"ifx_fieldtypes",
			"ifx_free_blob",
			"ifx_free_char",
			"ifx_free_result",
			"ifx_get_blob",
			"ifx_get_char",
			"ifx_getsqlca",
			"ifx_htmltbl_result",
			"ifx_nullformat",
			"ifx_num_fields",
			"ifx_num_rows",
			"ifx_pconnect",
			"ifx_prepare",
			"ifx_query",
			"ifx_textasvarchar",
			"ifx_update_blob",
			"ifx_update_char",
			"ifxus_close_slob",
			"ifxus_create_slob",
			"ifxus_free_slob",
			"ifxus_open_slob",
			"ifxus_read_slob",
			"ifxus_seek_slob",
			"ifxus_tell_slob",
			"ifxus_write_slob",
			"ignore_user_abort",
			"iis_add_server",
			"iis_get_dir_security",
			"iis_get_script_map",
			"iis_get_server_by_comment",
			"iis_get_server_by_path",
			"iis_get_server_rights",
			"iis_get_service_state",
			"iis_remove_server",
			"iis_set_app_settings",
			"iis_set_dir_security",
			"iis_set_script_map",
			"iis_set_server_rights",
			"iis_start_server",
			"iis_start_service",
			"iis_stop_server",
			"iis_stop_service",
			"image2wbmp",
			"image_type_to_extension",
			"image_type_to_mime_type",
			"imagealphablending",
			"imageantialias",
			"imagearc",
			"imagechar",
			"imagecharup",
			"imagecolorallocate",
			"imagecolorallocatealpha",
			"imagecolorat",
			"imagecolorclosest",
			"imagecolorclosestalpha",
			"imagecolorclosesthwb",
			"imagecolordeallocate",
			"imagecolorexact",
			"imagecolorexactalpha",
			"imagecolormatch",
			"imagecolorresolve",
			"imagecolorresolvealpha",
			"imagecolorset",
			"imagecolorsforindex",
			"imagecolorstotal",
			"imagecolortransparent",
			"imageconvolution",
			"imagecopy",
			"imagecopymerge",
			"imagecopymergegray",
			"imagecopyresampled",
			"imagecopyresized",
			"imagecreate",
			"imagecreatefromgd",
			"imagecreatefromgd2",
			"imagecreatefromgd2part",
			"imagecreatefromgif",
			"imagecreatefromjpeg",
			"imagecreatefrompng",
			"imagecreatefromstring",
			"imagecreatefromwbmp",
			"imagecreatefromxbm",
			"imagecreatefromxpm",
			"imagecreatetruecolor",
			"imagedashedline",
			"imagedestroy",
			"imageellipse",
			"imagefill",
			"imagefilledarc",
			"imagefilledellipse",
			"imagefilledpolygon",
			"imagefilledrectangle",
			"imagefilltoborder",
			"\timagefilter",
			"imagefontheight",
			"imagefontwidth",
			"imageftbbox",
			"imagefttext",
			"imagegammacorrect",
			"imagegd",
			"imagegd2",
			"imagegif",
			"imageinterlace",
			"imageistruecolor",
			"imagejpeg",
			"imagelayereffect",
			"imageline",
			"imageloadfont",
			"imagepalettecopy",
			"imagepng",
			"imagepolygon",
			"imagepsbbox",
			"imagepsencodefont",
			"imagepsextendfont",
			"imagepsfreefont",
			"imagepsloadfont",
			"imagepsslantfont",
			"imagepstext",
			"imagerectangle",
			"imagerotate",
			"imagesavealpha",
			"imagesetbrush",
			"imagesetpixel",
			"imagesetstyle",
			"imagesetthickness",
			"imagesettile",
			"imagestring",
			"imagestringup",
			"imagesx",
			"imagesy",
			"imagetruecolortopalette",
			"imagettfbbox",
			"imagettftext",
			"imagetypes",
			"imagewbmp",
			"imagexbm",
			"imap_8bit",
			"imap_alerts",
			"imap_append",
			"imap_base64",
			"imap_binary",
			"imap_body",
			"imap_bodystruct",
			"imap_check",
			"imap_clearflag_full",
			"imap_close",
			"imap_createmailbox",
			"imap_delete",
			"imap_deletemailbox",
			"imap_errors",
			"imap_expunge",
			"imap_fetch_overview",
			"imap_fetchbody",
			"imap_fetchheader",
			"imap_fetchstructure",
			"imap_get_quota",
			"imap_get_quotaroot",
			"imap_getacl",
			"imap_getmailboxes",
			"imap_getsubscribed",
			"imap_header",
			"imap_headerinfo",
			"imap_headers",
			"imap_last_error",
			"imap_list",
			"imap_listmailbox",
			"imap_listscan",
			"imap_listsubscribed",
			"imap_lsub",
			"imap_mail",
			"imap_mail_compose",
			"imap_mail_copy",
			"imap_mail_move",
			"imap_mailboxmsginfo",
			"imap_mime_header_decode",
			"imap_msgno",
			"imap_num_msg",
			"imap_num_recent",
			"imap_open",
			"imap_ping",
			"imap_qprint",
			"imap_renamemailbox",
			"imap_reopen",
			"imap_rfc822_parse_adrlist",
			"imap_rfc822_parse_headers",
			"imap_rfc822_write_address",
			"imap_scanmailbox",
			"imap_search",
			"imap_set_quota",
			"imap_setacl",
			"imap_setflag_full",
			"imap_sort",
			"imap_status",
			"imap_subscribe",
			"imap_thread",
			"imap_timeout",
			"imap_uid",
			"imap_undelete",
			"imap_unsubscribe",
			"imap_utf7_decode",
			"imap_utf7_encode",
			"imap_utf8",
			"implode",
			"import_request_variables",
			"in_array",
			"include",
			"include_once",
			"inet_ntop",
			"inet_pton",
			"ingres_autocommit",
			"ingres_close",
			"ingres_commit",
			"ingres_connect",
			"ingres_cursor",
			"ingres_errno",
			"ingres_error",
			"ingres_errsqlstate",
			"ingres_fetch_array",
			"ingres_fetch_object",
			"ingres_fetch_row",
			"ingres_field_length",
			"ingres_field_name",
			"ingres_field_nullable",
			"ingres_field_precision",
			"ingres_field_scale",
			"ingres_field_type",
			"ingres_num_fields",
			"ingres_num_rows",
			"ingres_pconnect",
			"ingres_query",
			"ingres_rollback",
			"ini_alter",
			"ini_get",
			"ini_get_all",
			"ini_restore",
			"ini_set",
			"input_filters_list",
			"input_get",
			"input_get_args",
			"input_has_variable",
			"input_name_to_filter",
			"interface_exists",
			"intval",
			"ip2long",
			"iptcembed",
			"iptcparse",
			"ircg_channel_mode",
			"ircg_disconnect",
			"ircg_eval_ecmascript_params",
			"ircg_fetch_error_msg",
			"ircg_get_username",
			"ircg_html_encode",
			"ircg_ignore_add",
			"ircg_ignore_del",
			"ircg_invite",
			"ircg_is_conn_alive",
			"ircg_join",
			"ircg_kick",
			"ircg_list",
			"ircg_lookup_format_messages",
			"ircg_lusers",
			"ircg_msg",
			"ircg_names",
			"ircg_nick",
			"ircg_nickname_escape",
			"ircg_nickname_unescape",
			"ircg_notice",
			"ircg_oper",
			"ircg_part",
			"ircg_pconnect",
			"ircg_register_format_messages",
			"ircg_set_current",
			"ircg_set_file",
			"ircg_set_on_die",
			"ircg_topic",
			"ircg_who",
			"ircg_whois",
			"is_a",
			"is_array",
			"is_bool",
			"is_callable",
			"is_dir",
			"is_double",
			"is_executable",
			"is_file",
			"is_finite",
			"is_float",
			"is_infinite",
			"is_int",
			"is_integer",
			"is_link",
			"is_long",
			"is_nan",
			"is_null",
			"is_numeric",
			"is_object",
			"is_readable",
			"is_real",
			"is_resource",
			"is_scalar",
			"is_soap_fault",
			"is_string",
			"is_subclass_of",
			"is_uploaded_file",
			"is_writable",
			"is_writeable",
			"isset",
			"iterator_count",
			"iterator_to_array",
			"java_last_exception_clear",
			"java_last_exception_get",
			"jddayofweek",
			"jdmonthname",
			"jdtofrench",
			"jdtogregorian",
			"jdtojewish",
			"jdtojulian",
			"jdtounix",
			"jewishtojd",
			"join",
			"jpeg2wbmp",
			"juliantojd",
			"kadm5_chpass_principal",
			"kadm5_create_principal",
			"kadm5_delete_principal",
			"kadm5_destroy",
			"kadm5_flush",
			"kadm5_get_policies",
			"kadm5_get_principal",
			"kadm5_get_principals",
			"kadm5_init_with_password",
			"kadm5_modify_principal",
			"key",
			"krsort",
			"ksort",
			"lcg_value",
			"lchgrp",
			"lchown",
			"ldap_8859_to_t61",
			"ldap_add",
			"ldap_bind",
			"ldap_close",
			"ldap_compare",
			"ldap_connect",
			"ldap_count_entries",
			"ldap_delete",
			"ldap_dn2ufn",
			"ldap_err2str",
			"ldap_errno",
			"ldap_error",
			"ldap_explode_dn",
			"ldap_first_attribute",
			"ldap_first_entry",
			"ldap_first_reference",
			"ldap_free_result",
			"ldap_get_attributes",
			"ldap_get_dn",
			"ldap_get_entries",
			"ldap_get_option",
			"ldap_get_values",
			"ldap_get_values_len",
			"ldap_list",
			"ldap_mod_add",
			"ldap_mod_del",
			"ldap_mod_replace",
			"ldap_modify",
			"ldap_next_attribute",
			"ldap_next_entry",
			"ldap_next_reference",
			"ldap_parse_reference",
			"ldap_parse_result",
			"ldap_read",
			"ldap_rename",
			"ldap_sasl_bind",
			"ldap_search",
			"ldap_set_option",
			"ldap_set_rebind_proc",
			"ldap_sort",
			"ldap_start_tls",
			"ldap_t61_to_8859",
			"ldap_unbind",
			"levenshtein",
			"libxml_clear_errors",
			"libxml_get_errors",
			"libxml_get_last_error",
			"libxml_set_streams_context",
			"libxml_use_internal_errors",
			"limititerator_getposition",
			"limititerator_next",
			"limititerator_rewind",
			"limititerator_seek",
			"limititerator_valid",
			"link",
			"linkinfo",
			"list",
			"localeconv",
			"localtime",
			"log",
			"log10",
			"log1p",
			"long2ip",
			"lstat",
			"ltrim",
			"lzf_compress",
			"lzf_decompress",
			"lzf_optimized_for",
			"m_checkstatus",
			"m_completeauthorizations",
			"m_connect",
			"m_connectionerror",
			"m_deletetrans",
			"m_destroyconn",
			"m_destroyengine",
			"m_getcell",
			"m_getcellbynum",
			"m_getcommadelimited",
			"m_getheader",
			"m_initconn",
			"m_initengine",
			"m_iscommadelimited",
			"m_maxconntimeout",
			"m_monitor",
			"m_numcolumns",
			"m_numrows",
			"m_parsecommadelimited",
			"m_responsekeys",
			"m_responseparam",
			"m_returnstatus",
			"m_setblocking",
			"m_setdropfile",
			"m_setip",
			"m_setssl",
			"m_setssl_cafile",
			"m_setssl_files",
			"m_settimeout",
			"m_sslcert_gen_hash",
			"m_transactionssent",
			"m_transinqueue",
			"m_transkeyval",
			"m_transnew",
			"m_transsend",
			"m_uwait",
			"m_validateidentifier",
			"m_verifyconnection",
			"m_verifysslcert",
			"mail",
			"mailparse_determine_best_xfer_encoding",
			"mailparse_msg_create",
			"mailparse_msg_extract_part",
			"mailparse_msg_extract_part_file",
			"mailparse_msg_free",
			"mailparse_msg_get_part",
			"mailparse_msg_get_part_data",
			"mailparse_msg_get_structure",
			"mailparse_msg_parse",
			"mailparse_msg_parse_file",
			"mailparse_rfc822_parse_addresses",
			"mailparse_stream_encode",
			"mailparse_uudecode_all",
			"main",
			"max",
			"maxdb_affected_rows",
			"maxdb_autocommit",
			"maxdb_bind_param",
			"maxdb_bind_result",
			"maxdb_change_user",
			"maxdb_character_set_name",
			"maxdb_client_encoding",
			"maxdb_close",
			"maxdb_close_long_data",
			"maxdb_commit",
			"maxdb_connect",
			"maxdb_connect_errno",
			"maxdb_connect_error",
			"maxdb_data_seek",
			"maxdb_debug",
			"maxdb_disable_reads_from_master",
			"maxdb_disable_rpl_parse",
			"maxdb_dump_debug_info",
			"maxdb_embedded_connect",
			"maxdb_enable_reads_from_master",
			"maxdb_enable_rpl_parse",
			"maxdb_errno",
			"maxdb_error",
			"maxdb_escape_string",
			"maxdb_execute",
			"maxdb_fetch",
			"maxdb_fetch_array",
			"maxdb_fetch_assoc",
			"maxdb_fetch_field",
			"maxdb_fetch_field_direct",
			"maxdb_fetch_fields",
			"maxdb_fetch_lengths",
			"maxdb_fetch_object",
			"maxdb_fetch_row",
			"maxdb_field_count",
			"maxdb_field_seek",
			"maxdb_field_tell",
			"maxdb_free_result",
			"maxdb_get_client_info",
			"maxdb_get_client_version",
			"maxdb_get_host_info",
			"maxdb_get_metadata",
			"maxdb_get_proto_info",
			"maxdb_get_server_info",
			"maxdb_get_server_version",
			"maxdb_info",
			"maxdb_init",
			"maxdb_insert_id",
			"maxdb_kill",
			"maxdb_master_query",
			"maxdb_more_results",
			"maxdb_multi_query",
			"maxdb_next_result",
			"maxdb_num_fields",
			"maxdb_num_rows",
			"maxdb_options",
			"maxdb_param_count",
			"maxdb_ping",
			"maxdb_prepare",
			"maxdb_query",
			"maxdb_real_connect",
			"maxdb_real_escape_string",
			"maxdb_real_query",
			"maxdb_report",
			"maxdb_rollback",
			"maxdb_rpl_parse_enabled",
			"maxdb_rpl_probe",
			"maxdb_rpl_query_type",
			"maxdb_select_db",
			"maxdb_send_long_data",
			"maxdb_send_query",
			"maxdb_server_end",
			"maxdb_server_init",
			"maxdb_set_opt",
			"maxdb_sqlstate",
			"maxdb_ssl_set",
			"maxdb_stat",
			"maxdb_stmt_affected_rows",
			"maxdb_stmt_bind_param",
			"maxdb_stmt_bind_result",
			"maxdb_stmt_close",
			"maxdb_stmt_close_long_data",
			"maxdb_stmt_data_seek",
			"maxdb_stmt_errno",
			"maxdb_stmt_error",
			"maxdb_stmt_execute",
			"maxdb_stmt_fetch",
			"maxdb_stmt_free_result",
			"maxdb_stmt_init",
			"maxdb_stmt_num_rows",
			"maxdb_stmt_param_count",
			"maxdb_stmt_prepare",
			"maxdb_stmt_reset",
			"maxdb_stmt_result_metadata",
			"maxdb_stmt_send_long_data",
			"maxdb_stmt_sqlstate",
			"maxdb_stmt_store_result",
			"maxdb_store_result",
			"maxdb_thread_id",
			"maxdb_thread_safe",
			"maxdb_use_result",
			"maxdb_warning_count",
			"mb_convert_case",
			"mb_convert_encoding",
			"mb_convert_kana",
			"mb_convert_variables",
			"mb_decode_mimeheader",
			"mb_decode_numericentity",
			"mb_detect_encoding",
			"mb_detect_order",
			"mb_encode_mimeheader",
			"mb_encode_numericentity",
			"mb_ereg",
			"mb_ereg_match",
			"mb_ereg_replace",
			"mb_ereg_search",
			"mb_ereg_search_getpos",
			"mb_ereg_search_getregs",
			"mb_ereg_search_init",
			"mb_ereg_search_pos",
			"mb_ereg_search_regs",
			"mb_ereg_search_setpos",
			"mb_eregi",
			"mb_eregi_replace",
			"mb_get_info",
			"mb_http_input",
			"mb_http_output",
			"mb_internal_encoding",
			"mb_language",
			"mb_list_encodings",
			"mb_output_handler",
			"mb_parse_str",
			"mb_preferred_mime_name",
			"mb_regex_encoding",
			"mb_regex_set_options",
			"mb_send_mail",
			"mb_split",
			"mb_strcut",
			"mb_strimwidth",
			"mb_strlen",
			"mb_strpos",
			"mb_strrpos",
			"mb_strtolower",
			"mb_strtoupper",
			"mb_strwidth",
			"mb_substitute_character",
			"mb_substr",
			"mb_substr_count",
			"mcal_append_event",
			"mcal_close",
			"mcal_create_calendar",
			"mcal_date_compare",
			"mcal_date_valid",
			"mcal_day_of_week",
			"mcal_day_of_year",
			"mcal_days_in_month",
			"mcal_delete_calendar",
			"mcal_delete_event",
			"mcal_event_add_attribute",
			"mcal_event_init",
			"mcal_event_set_alarm",
			"mcal_event_set_category",
			"mcal_event_set_class",
			"mcal_event_set_description",
			"mcal_event_set_end",
			"mcal_event_set_recur_daily",
			"mcal_event_set_recur_monthly_mday",
			"mcal_event_set_recur_monthly_wday",
			"mcal_event_set_recur_none",
			"mcal_event_set_recur_weekly",
			"mcal_event_set_recur_yearly",
			"mcal_event_set_start",
			"mcal_event_set_title",
			"mcal_expunge",
			"mcal_fetch_current_stream_event",
			"mcal_fetch_event",
			"mcal_is_leap_year",
			"mcal_list_alarms",
			"mcal_list_events",
			"mcal_next_recurrence",
			"mcal_open",
			"mcal_popen",
			"mcal_rename_calendar",
			"mcal_reopen",
			"mcal_snooze",
			"mcal_store_event",
			"mcal_time_valid",
			"mcal_week_of_year",
			"mcrypt_cbc",
			"mcrypt_cfb",
			"mcrypt_create_iv",
			"mcrypt_decrypt",
			"mcrypt_ecb",
			"mcrypt_enc_get_algorithms_name",
			"mcrypt_enc_get_block_size",
			"mcrypt_enc_get_iv_size",
			"mcrypt_enc_get_key_size",
			"mcrypt_enc_get_modes_name",
			"mcrypt_enc_get_supported_key_sizes",
			"mcrypt_enc_is_block_algorithm",
			"mcrypt_enc_is_block_algorithm_mode",
			"mcrypt_enc_is_block_mode",
			"mcrypt_enc_self_test",
			"mcrypt_encrypt",
			"mcrypt_generic",
			"mcrypt_generic_deinit",
			"mcrypt_generic_end",
			"mcrypt_generic_init",
			"mcrypt_get_block_size",
			"mcrypt_get_cipher_name",
			"mcrypt_get_iv_size",
			"mcrypt_get_key_size",
			"mcrypt_list_algorithms",
			"mcrypt_list_modes",
			"mcrypt_module_close",
			"mcrypt_module_get_algo_block_size",
			"mcrypt_module_get_algo_key_size",
			"mcrypt_module_get_supported_key_sizes",
			"mcrypt_module_is_block_algorithm",
			"mcrypt_module_is_block_algorithm_mode",
			"mcrypt_module_is_block_mode",
			"mcrypt_module_open",
			"mcrypt_module_self_test",
			"mcrypt_ofb",
			"md5",
			"md5_file",
			"mdecrypt_generic",
			"memcache_add",
			"memcache_addserver",
			"memcache_close",
			"memcache_connect",
			"memcache_debug",
			"memcache_decrement",
			"memcache_delete",
			"memcache_flush",
			"memcache_get",
			"memcache_getextendedstats",
			"memcache_getstats",
			"memcache_getversion",
			"memcache_increment",
			"memcache_pconnect",
			"memcache_replace",
			"memcache_set",
			"memcache_setcompressthreshold",
			"memory_get_peak_usage",
			"memory_get_usage",
			"metaphone",
			"method_exists",
			"mhash",
			"mhash_count",
			"mhash_get_block_size",
			"mhash_get_hash_name",
			"mhash_keygen_s2k",
			"microtime",
			"mime_content_type",
			"min",
			"ming_keypress",
			"ming_setcubicthreshold",
			"ming_setscale",
			"ming_useconstants",
			"ming_useswfversion",
			"mkdir",
			"mktime",
			"money_format",
			"move_uploaded_file",
			"msession_connect",
			"msession_count",
			"msession_create",
			"msession_destroy",
			"msession_disconnect",
			"msession_find",
			"msession_get",
			"msession_get_array",
			"msession_get_data",
			"msession_inc",
			"msession_list",
			"msession_listvar",
			"msession_lock",
			"msession_plugin",
			"msession_randstr",
			"msession_set",
			"msession_set_array",
			"msession_set_data",
			"msession_timeout",
			"msession_uniq",
			"msession_unlock",
			"msg_get_queue",
			"msg_receive",
			"msg_remove_queue",
			"msg_send",
			"msg_set_queue",
			"msg_stat_queue",
			"msql",
			"msql_affected_rows",
			"msql_close",
			"msql_connect",
			"msql_create_db",
			"msql_createdb",
			"msql_data_seek",
			"msql_db_query",
			"msql_dbname",
			"msql_drop_db",
			"msql_error",
			"msql_fetch_array",
			"msql_fetch_field",
			"msql_fetch_object",
			"msql_fetch_row",
			"msql_field_flags",
			"msql_field_len",
			"msql_field_name",
			"msql_field_seek",
			"msql_field_table",
			"msql_field_type",
			"msql_fieldflags",
			"msql_fieldlen",
			"msql_fieldname",
			"msql_fieldtable",
			"msql_fieldtype",
			"msql_free_result",
			"msql_list_dbs",
			"msql_list_fields",
			"msql_list_tables",
			"msql_num_fields",
			"msql_num_rows",
			"msql_numfields",
			"msql_numrows",
			"msql_pconnect",
			"msql_query",
			"msql_regcase",
			"msql_result",
			"msql_select_db",
			"msql_tablename",
			"mssql_bind",
			"mssql_close",
			"mssql_connect",
			"mssql_data_seek",
			"mssql_execute",
			"mssql_fetch_array",
			"mssql_fetch_assoc",
			"mssql_fetch_batch",
			"mssql_fetch_field",
			"mssql_fetch_object",
			"mssql_fetch_row",
			"mssql_field_length",
			"mssql_field_name",
			"mssql_field_seek",
			"mssql_field_type",
			"mssql_free_result",
			"mssql_free_statement",
			"mssql_get_last_message",
			"mssql_guid_string",
			"mssql_init",
			"mssql_min_error_severity",
			"mssql_min_message_severity",
			"mssql_next_result",
			"mssql_num_fields",
			"mssql_num_rows",
			"mssql_pconnect",
			"mssql_query",
			"mssql_result",
			"mssql_rows_affected",
			"mssql_select_db",
			"mt_getrandmax",
			"mt_rand",
			"mt_srand",
			"muscat_close",
			"muscat_get",
			"muscat_give",
			"muscat_setup",
			"muscat_setup_net",
			"mysql_affected_rows",
			"mysql_change_user",
			"mysql_client_encoding",
			"mysql_close",
			"mysql_connect",
			"mysql_create_db",
			"mysql_data_seek",
			"mysql_db_name",
			"mysql_db_query",
			"mysql_drop_db",
			"mysql_errno",
			"mysql_error",
			"mysql_escape_string",
			"mysql_fetch_array",
			"mysql_fetch_assoc",
			"mysql_fetch_field",
			"mysql_fetch_lengths",
			"mysql_fetch_object",
			"mysql_fetch_row",
			"mysql_field_flags",
			"mysql_field_len",
			"mysql_field_name",
			"mysql_field_seek",
			"mysql_field_table",
			"mysql_field_type",
			"mysql_free_result",
			"mysql_get_client_info",
			"mysql_get_host_info",
			"mysql_get_proto_info",
			"mysql_get_server_info",
			"mysql_info",
			"mysql_insert_id",
			"mysql_list_dbs",
			"mysql_list_fields",
			"mysql_list_processes",
			"mysql_list_tables",
			"mysql_num_fields",
			"mysql_num_rows",
			"mysql_pconnect",
			"mysql_ping",
			"mysql_query",
			"mysql_real_escape_string",
			"mysql_result",
			"mysql_select_db",
			"mysql_stat",
			"mysql_tablename",
			"mysql_thread_id",
			"mysql_unbuffered_query",
			"mysqli_affected_rows",
			"mysqli_autocommit",
			"mysqli_bind_param",
			"mysqli_bind_result",
			"mysqli_change_user",
			"mysqli_character_set_name",
			"mysqli_client_encoding",
			"mysqli_close",
			"mysqli_commit",
			"mysqli_connect",
			"mysqli_connect_errno",
			"mysqli_connect_error",
			"mysqli_data_seek",
			"mysqli_debug",
			"mysqli_disable_reads_from_master",
			"mysqli_disable_rpl_parse",
			"mysqli_dump_debug_info",
			"mysqli_embedded_connect",
			"mysqli_enable_reads_from_master",
			"mysqli_enable_rpl_parse",
			"mysqli_errno",
			"mysqli_error",
			"mysqli_escape_string",
			"mysqli_execute",
			"mysqli_fetch",
			"mysqli_fetch_array",
			"mysqli_fetch_assoc",
			"mysqli_fetch_field",
			"mysqli_fetch_field_direct",
			"mysqli_fetch_fields",
			"mysqli_fetch_lengths",
			"mysqli_fetch_object",
			"mysqli_fetch_row",
			"mysqli_field_count",
			"mysqli_field_seek",
			"mysqli_field_tell",
			"mysqli_free_result",
			"mysqli_get_client_info",
			"mysqli_get_client_version",
			"mysqli_get_host_info",
			"mysqli_get_metadata",
			"mysqli_get_proto_info",
			"mysqli_get_server_info",
			"mysqli_get_server_version",
			"mysqli_info",
			"mysqli_init",
			"mysqli_insert_id",
			"mysqli_kill",
			"mysqli_master_query",
			"mysqli_more_results",
			"mysqli_multi_query",
			"mysqli_next_result",
			"mysqli_num_fields",
			"mysqli_num_rows",
			"mysqli_options",
			"mysqli_param_count",
			"mysqli_ping",
			"mysqli_prepare",
			"mysqli_query",
			"mysqli_real_connect",
			"mysqli_real_escape_string",
			"mysqli_real_query",
			"mysqli_report",
			"mysqli_rollback",
			"mysqli_rpl_parse_enabled",
			"mysqli_rpl_probe",
			"mysqli_rpl_query_type",
			"mysqli_select_db",
			"mysqli_send_long_data",
			"mysqli_send_query",
			"mysqli_server_end",
			"mysqli_server_init",
			"mysqli_set_charset",
			"mysqli_set_opt",
			"mysqli_sqlstate",
			"mysqli_ssl_set",
			"mysqli_stat",
			"mysqli_stmt_affected_rows",
			"mysqli_stmt_bind_param",
			"mysqli_stmt_bind_result",
			"mysqli_stmt_close",
			"mysqli_stmt_data_seek",
			"mysqli_stmt_errno",
			"mysqli_stmt_error",
			"mysqli_stmt_execute",
			"mysqli_stmt_fetch",
			"mysqli_stmt_free_result",
			"mysqli_stmt_init",
			"mysqli_stmt_num_rows",
			"mysqli_stmt_param_count",
			"mysqli_stmt_prepare",
			"mysqli_stmt_reset",
			"mysqli_stmt_result_metadata",
			"mysqli_stmt_send_long_data",
			"mysqli_stmt_sqlstate",
			"mysqli_stmt_store_result",
			"mysqli_store_result",
			"mysqli_thread_id",
			"mysqli_thread_safe",
			"mysqli_use_result",
			"mysqli_warning_count",
            "affected_rows",
			"change_user",
			"client_encoding",
			"close",
			"connect",
			"create_db",
			"data_seek",
			"db_name",
			"db_query",
			"drop_db",
			"errno",
			"error",
			"escape_string",
			"fetch_array",
			"fetch_assoc",
			"fetch_field",
			"fetch_lengths",
			"fetch_object",
			"fetch_row",
			"field_flags",
			"field_len",
			"field_name",
			"field_seek",
			"field_table",
			"field_type",
			"free_result",
			"get_client_info",
			"get_host_info",
			"get_proto_info",
			"get_server_info",
			"info",
			"insert_id",
			"list_dbs",
			"list_fields",
			"list_processes",
			"list_tables",
			"num_fields",
			"num_rows",
			"pconnect",
			"ping",
			"query",
            "__construct",
            "__destruct",
			"real_escape_string",
			"result",
			"select_db",
			"stat",
			"tablename",
			"thread_id",
			"unbuffered_query",
			"affected_rows",
			"autocommit",
			"bind_param",
			"bind_result",
			"change_user",
			"character_set_name",
			"client_encoding",
			"close",
			"commit",
			"connect",
			"connect_errno",
			"connect_error",
			"data_seek",
			"debug",
			"disable_reads_from_master",
			"disable_rpl_parse",
			"dump_debug_info",
			"embedded_connect",
			"enable_reads_from_master",
			"enable_rpl_parse",
			"errno",
			"error",
			"escape_string",
			"execute",
			"fetch",
			"fetch_array",
			"fetch_assoc",
			"fetch_field",
			"fetch_field_direct",
			"fetch_fields",
			"fetch_lengths",
			"fetch_object",
			"fetch_row",
			"field_count",
			"field_seek",
			"field_tell",
			"free_result",
			"get_client_info",
			"get_client_version",
			"get_host_info",
			"get_metadata",
			"get_proto_info",
			"get_server_info",
			"get_server_version",
			"info",
			"init",
			"insert_id",
			"kill",
			"master_query",
			"more_results",
			"multi_query",
			"next_result",
			"num_fields",
			"num_rows",
			"options",
			"param_count",
			"ping",
			"prepare",
			"query",
			"real_connect",
			"real_escape_string",
			"real_query",
			"report",
			"rollback",
			"rpl_parse_enabled",
			"rpl_probe",
			"rpl_query_type",
			"select_db",
			"send_long_data",
			"send_query",
			"server_end",
			"server_init",
			"set_charset",
			"set_opt",
			"sqlstate",
			"ssl_set",
			"stat",
			"stmt_affected_rows",
			"stmt_bind_param",
			"stmt_bind_result",
			"stmt_close",
			"stmt_data_seek",
			"stmt_errno",
			"stmt_error",
			"stmt_execute",
			"stmt_fetch",
			"stmt_free_result",
			"stmt_init",
			"stmt_num_rows",
			"stmt_param_count",
			"stmt_prepare",
			"stmt_reset",
			"stmt_result_metadata",
			"stmt_send_long_data",
			"stmt_sqlstate",
			"stmt_store_result",
			"store_result",
			"thread_id",
			"thread_safe",
			"use_result",
			"warning_count",
			"natcasesort",
			"natsort",
			"ncurses_addch",
			"ncurses_addchnstr",
			"ncurses_addchstr",
			"ncurses_addnstr",
			"ncurses_addstr",
			"ncurses_assume_default_colors",
			"ncurses_attroff",
			"ncurses_attron",
			"ncurses_attrset",
			"ncurses_baudrate",
			"ncurses_beep",
			"ncurses_bkgd",
			"ncurses_bkgdset",
			"ncurses_border",
			"ncurses_bottom_panel",
			"ncurses_can_change_color",
			"ncurses_cbreak",
			"ncurses_clear",
			"ncurses_clrtobot",
			"ncurses_clrtoeol",
			"ncurses_color_content",
			"ncurses_color_set",
			"ncurses_curs_set",
			"ncurses_def_prog_mode",
			"ncurses_def_shell_mode",
			"ncurses_define_key",
			"ncurses_del_panel",
			"ncurses_delay_output",
			"ncurses_delch",
			"ncurses_deleteln",
			"ncurses_delwin",
			"ncurses_doupdate",
			"ncurses_echo",
			"ncurses_echochar",
			"ncurses_end",
			"ncurses_erase",
			"ncurses_erasechar",
			"ncurses_filter",
			"ncurses_flash",
			"ncurses_flushinp",
			"ncurses_getch",
			"ncurses_getmaxyx",
			"ncurses_getmouse",
			"ncurses_getyx",
			"ncurses_halfdelay",
			"ncurses_has_colors",
			"ncurses_has_ic",
			"ncurses_has_il",
			"ncurses_has_key",
			"ncurses_hide_panel",
			"ncurses_hline",
			"ncurses_inch",
			"ncurses_init",
			"ncurses_init_color",
			"ncurses_init_pair",
			"ncurses_insch",
			"ncurses_insdelln",
			"ncurses_insertln",
			"ncurses_insstr",
			"ncurses_instr",
			"ncurses_isendwin",
			"ncurses_keyok",
			"ncurses_keypad",
			"ncurses_killchar",
			"ncurses_longname",
			"ncurses_meta",
			"ncurses_mouse_trafo",
			"ncurses_mouseinterval",
			"ncurses_mousemask",
			"ncurses_move",
			"ncurses_move_panel",
			"ncurses_mvaddch",
			"ncurses_mvaddchnstr",
			"ncurses_mvaddchstr",
			"ncurses_mvaddnstr",
			"ncurses_mvaddstr",
			"ncurses_mvcur",
			"ncurses_mvdelch",
			"ncurses_mvgetch",
			"ncurses_mvhline",
			"ncurses_mvinch",
			"ncurses_mvvline",
			"ncurses_mvwaddstr",
			"ncurses_napms",
			"ncurses_new_panel",
			"ncurses_newpad",
			"ncurses_newwin",
			"ncurses_nl",
			"ncurses_nocbreak",
			"ncurses_noecho",
			"ncurses_nonl",
			"ncurses_noqiflush",
			"ncurses_noraw",
			"ncurses_pair_content",
			"ncurses_panel_above",
			"ncurses_panel_below",
			"ncurses_panel_window",
			"ncurses_pnoutrefresh",
			"ncurses_prefresh",
			"ncurses_putp",
			"ncurses_qiflush",
			"ncurses_raw",
			"ncurses_refresh",
			"ncurses_replace_panel",
			"ncurses_reset_prog_mode",
			"ncurses_reset_shell_mode",
			"ncurses_resetty",
			"ncurses_savetty",
			"ncurses_scr_dump",
			"ncurses_scr_init",
			"ncurses_scr_restore",
			"ncurses_scr_set",
			"ncurses_scrl",
			"ncurses_show_panel",
			"ncurses_slk_attr",
			"ncurses_slk_attroff",
			"ncurses_slk_attron",
			"ncurses_slk_attrset",
			"ncurses_slk_clear",
			"ncurses_slk_color",
			"ncurses_slk_init",
			"ncurses_slk_noutrefresh",
			"ncurses_slk_refresh",
			"ncurses_slk_restore",
			"ncurses_slk_set",
			"ncurses_slk_touch",
			"ncurses_standend",
			"ncurses_standout",
			"ncurses_start_color",
			"ncurses_termattrs",
			"ncurses_termname",
			"ncurses_timeout",
			"ncurses_top_panel",
			"ncurses_typeahead",
			"ncurses_ungetch",
			"ncurses_ungetmouse",
			"ncurses_update_panels",
			"ncurses_use_default_colors",
			"ncurses_use_env",
			"ncurses_use_extended_names",
			"ncurses_vidattr",
			"ncurses_vline",
			"ncurses_waddch",
			"ncurses_waddstr",
			"ncurses_wattroff",
			"ncurses_wattron",
			"ncurses_wattrset",
			"ncurses_wborder",
			"ncurses_wclear",
			"ncurses_wcolor_set",
			"ncurses_werase",
			"ncurses_wgetch",
			"ncurses_whline",
			"ncurses_wmouse_trafo",
			"ncurses_wmove",
			"ncurses_wnoutrefresh",
			"ncurses_wrefresh",
			"ncurses_wstandend",
			"ncurses_wstandout",
			"ncurses_wvline",
			"newt_bell",
			"newt_button",
			"newt_button_bar",
			"newt_centered_window",
			"newt_checkbox",
			"newt_checkbox_get_value",
			"newt_checkbox_set_flags",
			"newt_checkbox_set_value",
			"newt_checkbox_tree",
			"newt_checkbox_tree_add_item",
			"newt_checkbox_tree_find_item",
			"newt_checkbox_tree_get_current",
			"newt_checkbox_tree_get_entry_value",
			"newt_checkbox_tree_get_multi_selection",
			"newt_checkbox_tree_get_selection",
			"newt_checkbox_tree_multi",
			"newt_checkbox_tree_set_current",
			"newt_checkbox_tree_set_entry",
			"newt_checkbox_tree_set_entry_value",
			"newt_checkbox_tree_set_width",
			"newt_clear_key_buffer",
			"newt_cls",
			"newt_compact_button",
			"newt_component_add_callback",
			"newt_component_takes_focus",
			"newt_create_grid",
			"newt_cursor_off",
			"newt_cursor_on",
			"newt_delay",
			"newt_draw_form",
			"newt_draw_root_text",
			"newt_entry",
			"newt_entry_get_value",
			"newt_entry_set",
			"newt_entry_set_filter",
			"newt_entry_set_flags",
			"newt_finished",
			"newt_form",
			"newt_form_add_component",
			"newt_form_add_components",
			"newt_form_add_host_key",
			"newt_form_destroy",
			"newt_form_get_current",
			"newt_form_run",
			"newt_form_set_background",
			"newt_form_set_height",
			"newt_form_set_size",
			"newt_form_set_timer",
			"newt_form_set_width",
			"newt_form_watch_fd",
			"newt_get_screen_size",
			"newt_grid_add_components_to_form",
			"newt_grid_basic_window",
			"newt_grid_free",
			"newt_grid_get_size",
			"newt_grid_h_close_stacked",
			"newt_grid_h_stacked",
			"newt_grid_place",
			"newt_grid_set_field",
			"newt_grid_simple_window",
			"newt_grid_v_close_stacked",
			"newt_grid_v_stacked",
			"newt_grid_wrapped_window",
			"newt_grid_wrapped_window_at",
			"newt_init",
			"newt_label",
			"newt_label_set_text",
			"newt_listbox",
			"newt_listbox_append_entry",
			"newt_listbox_clear",
			"newt_listbox_clear_selection",
			"newt_listbox_delete_entry",
			"newt_listbox_get_current",
			"newt_listbox_get_selection",
			"newt_listbox_insert_entry",
			"newt_listbox_item_count",
			"newt_listbox_select_item",
			"newt_listbox_set_current",
			"newt_listbox_set_current_by_key",
			"newt_listbox_set_data",
			"newt_listbox_set_entry",
			"newt_listbox_set_width",
			"newt_listitem",
			"newt_listitem_get_data",
			"newt_listitem_set",
			"newt_open_window",
			"newt_pop_help_line",
			"newt_pop_window",
			"newt_push_help_line",
			"newt_radio_get_current",
			"newt_radiobutton",
			"newt_redraw_help_line",
			"newt_reflow_text",
			"newt_refresh",
			"newt_resize_screen",
			"newt_resume",
			"newt_run_form",
			"newt_scale",
			"newt_scale_set",
			"newt_scrollbar_set",
			"newt_set_help_callback",
			"newt_set_suspend_callback",
			"newt_suspend",
			"newt_textbox",
			"newt_textbox_get_num_lines",
			"newt_textbox_reflowed",
			"newt_textbox_set_height",
			"newt_textbox_set_text",
			"newt_vertical_scrollbar",
			"newt_wait_for_key",
			"newt_win_choice",
			"newt_win_entries",
			"newt_win_menu",
			"newt_win_message",
			"newt_win_messagev",
			"newt_win_ternary",
			"next",
			"ngettext",
			"nl2br",
			"nl_langinfo",
			"notes_body",
			"notes_copy_db",
			"notes_create_db",
			"notes_create_note",
			"notes_drop_db",
			"notes_find_note",
			"notes_header_info",
			"notes_list_msgs",
			"notes_mark_read",
			"notes_mark_unread",
			"notes_nav_create",
			"notes_search",
			"notes_unread",
			"notes_version",
			"nsapi_request_headers",
			"nsapi_response_headers",
			"nsapi_virtual",
			"number_format",
			"ob_clean",
			"ob_deflatehandler",
			"ob_end_clean",
			"ob_end_flush",
			"ob_etaghandler",
			"ob_flush",
			"ob_get_clean",
			"ob_get_contents",
			"ob_get_flush",
			"ob_get_length",
			"ob_get_level",
			"ob_get_status",
			"ob_gzhandler",
			"ob_iconv_handler",
			"ob_implicit_flush",
			"ob_inflatehandler",
			"ob_list_handlers",
			"ob_start",
			"ob_tidyhandler",
			"oci_bind_array_by_name",
			"oci_bind_by_name",
			"oci_cancel",
			"oci_close",
			"oci_collection_append",
			"oci_collection_assign",
			"oci_collection_element_assign",
			"oci_collection_element_get",
			"oci_collection_free",
			"oci_collection_max",
			"oci_collection_size",
			"oci_collection_trim",
			"oci_commit",
			"oci_connect",
			"oci_define_by_name",
			"oci_error",
			"oci_execute",
			"oci_fetch",
			"oci_fetch_all",
			"oci_fetch_array",
			"oci_fetch_assoc",
			"oci_fetch_object",
			"oci_fetch_row",
			"oci_field_is_null",
			"oci_field_name",
			"oci_field_precision",
			"oci_field_scale",
			"oci_field_size",
			"oci_field_type",
			"oci_field_type_raw",
			"oci_free_statement",
			"oci_internal_debug",
			"oci_lob_append",
			"oci_lob_close",
			"oci_lob_copy",
			"oci_lob_eof",
			"oci_lob_erase",
			"oci_lob_export",
			"oci_lob_flush",
			"oci_lob_free",
			"oci_lob_getbuffering",
			"oci_lob_import",
			"oci_lob_is_equal",
			"oci_lob_load",
			"oci_lob_read",
			"oci_lob_rewind",
			"oci_lob_save",
			"oci_lob_savefile",
			"oci_lob_seek",
			"oci_lob_setbuffering",
			"oci_lob_size",
			"oci_lob_tell",
			"oci_lob_truncate",
			"oci_lob_write",
			"oci_lob_writetemporary",
			"oci_lob_writetofile",
			"oci_new_collection",
			"oci_new_connect",
			"oci_new_cursor",
			"oci_new_descriptor",
			"oci_num_fields",
			"oci_num_rows",
			"oci_parse",
			"oci_password_change",
			"oci_pconnect",
			"oci_result",
			"oci_rollback",
			"oci_server_version",
			"oci_set_prefetch",
			"oci_statement_type",
			"ocibindbyname",
			"ocicancel",
			"ocicloselob",
			"ocicollappend",
			"ocicollassign",
			"ocicollassignelem",
			"ocicollgetelem",
			"ocicollmax",
			"ocicollsize",
			"ocicolltrim",
			"ocicolumnisnull",
			"ocicolumnname",
			"ocicolumnprecision",
			"ocicolumnscale",
			"ocicolumnsize",
			"ocicolumntype",
			"ocicolumntyperaw",
			"ocicommit",
			"ocidefinebyname",
			"ocierror",
			"ociexecute",
			"ocifetch",
			"ocifetchinto",
			"ocifetchstatement",
			"ocifreecollection",
			"ocifreecursor",
			"ocifreedesc",
			"ocifreestatement",
			"ociinternaldebug",
			"ociloadlob",
			"ocilogoff",
			"ocilogon",
			"ocinewcollection",
			"ocinewcursor",
			"ocinewdescriptor",
			"ocinlogon",
			"ocinumcols",
			"ociparse",
			"ociplogon",
			"ociresult",
			"ocirollback",
			"ocirowcount",
			"ocisavelob",
			"ocisavelobfile",
			"ociserverversion",
			"ocisetprefetch",
			"ocistatementtype",
			"ociwritelobtofile",
			"ociwritetemporarylob",
			"octdec",
			"odbc_autocommit",
			"odbc_binmode",
			"odbc_close",
			"odbc_close_all",
			"odbc_columnprivileges",
			"odbc_columns",
			"odbc_commit",
			"odbc_connect",
			"odbc_cursor",
			"odbc_data_source",
			"odbc_do",
			"odbc_error",
			"odbc_errormsg",
			"odbc_exec",
			"odbc_execute",
			"odbc_fetch_array",
			"odbc_fetch_into",
			"odbc_fetch_object",
			"odbc_fetch_row",
			"odbc_field_len",
			"odbc_field_name",
			"odbc_field_num",
			"odbc_field_precision",
			"odbc_field_scale",
			"odbc_field_type",
			"odbc_foreignkeys",
			"odbc_free_result",
			"odbc_gettypeinfo",
			"odbc_longreadlen",
			"odbc_next_result",
			"odbc_num_fields",
			"odbc_num_rows",
			"odbc_pconnect",
			"odbc_prepare",
			"odbc_primarykeys",
			"odbc_procedurecolumns",
			"odbc_procedures",
			"odbc_result",
			"odbc_result_all",
			"odbc_rollback",
			"odbc_setoption",
			"odbc_specialcolumns",
			"odbc_statistics",
			"odbc_tableprivileges",
			"odbc_tables",
			"openal_buffer_create",
			"openal_buffer_data",
			"openal_buffer_destroy",
			"openal_buffer_get",
			"openal_buffer_loadwav",
			"openal_context_create",
			"openal_context_current",
			"openal_context_destroy",
			"openal_context_process",
			"openal_context_suspend",
			"openal_device_close",
			"openal_device_open",
			"openal_listener_get",
			"openal_listener_set",
			"openal_source_create",
			"openal_source_destroy",
			"openal_source_get",
			"openal_source_pause",
			"openal_source_play",
			"openal_source_rewind",
			"openal_source_set",
			"openal_source_stop",
			"openal_stream",
			"opendir",
			"openlog",
			"openssl_csr_export",
			"openssl_csr_export_to_file",
			"openssl_csr_new",
			"openssl_csr_sign",
			"openssl_error_string",
			"openssl_free_key",
			"openssl_get_privatekey",
			"openssl_get_publickey",
			"openssl_open",
			"openssl_pkcs7_decrypt",
			"openssl_pkcs7_encrypt",
			"openssl_pkcs7_sign",
			"openssl_pkcs7_verify",
			"openssl_pkey_export",
			"openssl_pkey_export_to_file",
			"openssl_pkey_free",
			"openssl_pkey_get_private",
			"openssl_pkey_get_public",
			"openssl_pkey_new",
			"openssl_private_decrypt",
			"openssl_private_encrypt",
			"openssl_public_decrypt",
			"openssl_public_encrypt",
			"openssl_seal",
			"openssl_sign",
			"openssl_verify",
			"openssl_x509_check_private_key",
			"openssl_x509_checkpurpose",
			"openssl_x509_export",
			"openssl_x509_export_to_file",
			"openssl_x509_free",
			"openssl_x509_parse",
			"openssl_x509_read",
			"ora_bind",
			"ora_close",
			"ora_columnname",
			"ora_columnsize",
			"ora_columntype",
			"ora_commit",
			"ora_commitoff",
			"ora_commiton",
			"ora_do",
			"ora_error",
			"ora_errorcode",
			"ora_exec",
			"ora_fetch",
			"ora_fetch_into",
			"ora_getcolumn",
			"ora_logoff",
			"ora_logon",
			"ora_numcols",
			"ora_numrows",
			"ora_open",
			"ora_parse",
			"ora_plogon",
			"ora_rollback",
			"orbitenum",
			"orbitobject",
			"orbitstruct",
			"ord",
			"output_add_rewrite_var",
			"output_reset_rewrite_vars",
			"overload",
			"override_function",
			"ovrimos_close",
			"ovrimos_commit",
			"ovrimos_connect",
			"ovrimos_cursor",
			"ovrimos_exec",
			"ovrimos_execute",
			"ovrimos_fetch_into",
			"ovrimos_fetch_row",
			"ovrimos_field_len",
			"ovrimos_field_name",
			"ovrimos_field_num",
			"ovrimos_field_type",
			"ovrimos_free_result",
			"ovrimos_longreadlen",
			"ovrimos_num_fields",
			"ovrimos_num_rows",
			"ovrimos_prepare",
			"ovrimos_result",
			"ovrimos_result_all",
			"ovrimos_rollback",
			"pack",
			"parentiterator_getchildren",
			"parentiterator_haschildren",
			"parentiterator_next",
			"parentiterator_rewind",
			"parse_ini_file",
			"parse_str",
			"parse_url",
			"parsekit_compile_file",
			"parsekit_compile_string",
			"parsekit_func_arginfo",
			"passthru",
			"pathinfo",
			"pclose",
			"pcntl_alarm",
			"pcntl_exec",
			"pcntl_fork",
			"pcntl_getpriority",
			"pcntl_setpriority",
			"pcntl_signal",
			"pcntl_wait",
			"pcntl_waitpid",
			"pcntl_wexitstatus",
			"pcntl_wifexited",
			"pcntl_wifsignaled",
			"pcntl_wifstopped",
			"pcntl_wstopsig",
			"pcntl_wtermsig",
			"pdf_activate_item",
			"pdf_add_annotation",
			"pdf_add_bookmark",
			"pdf_add_launchlink",
			"pdf_add_locallink",
			"pdf_add_nameddest",
			"pdf_add_note",
			"pdf_add_outline",
			"pdf_add_pdflink",
			"pdf_add_thumbnail",
			"pdf_add_weblink",
			"pdf_arc",
			"pdf_arcn",
			"pdf_attach_file",
			"pdf_begin_document",
			"pdf_begin_font",
			"pdf_begin_glyph",
			"pdf_begin_item",
			"pdf_begin_layer",
			"pdf_begin_page",
			"pdf_begin_page_ext",
			"pdf_begin_pattern",
			"pdf_begin_template",
			"pdf_circle",
			"pdf_clip",
			"pdf_close",
			"pdf_close_image",
			"pdf_close_pdi",
			"pdf_close_pdi_page",
			"pdf_closepath",
			"pdf_closepath_fill_stroke",
			"pdf_closepath_stroke",
			"pdf_concat",
			"pdf_continue_text",
			"pdf_create_action",
			"pdf_create_annotation",
			"pdf_create_bookmark",
			"pdf_create_field",
			"pdf_create_fieldgroup",
			"pdf_create_gstate",
			"pdf_create_pvf",
			"pdf_create_textflow",
			"pdf_curveto",
			"pdf_define_layer",
			"pdf_delete",
			"pdf_delete_pvf",
			"pdf_delete_textflow",
			"pdf_encoding_set_char",
			"pdf_end_document",
			"pdf_end_font",
			"pdf_end_glyph",
			"pdf_end_item",
			"pdf_end_layer",
			"pdf_end_page",
			"pdf_end_page_ext",
			"pdf_end_pattern",
			"pdf_end_template",
			"pdf_endpath",
			"pdf_fill",
			"pdf_fill_imageblock",
			"pdf_fill_pdfblock",
			"pdf_fill_stroke",
			"pdf_fill_textblock",
			"pdf_findfont",
			"pdf_fit_image",
			"pdf_fit_pdi_page",
			"pdf_fit_textflow",
			"pdf_fit_textline",
			"pdf_get_apiname",
			"pdf_get_buffer",
			"pdf_get_errmsg",
			"pdf_get_errnum",
			"pdf_get_font",
			"pdf_get_fontname",
			"pdf_get_fontsize",
			"pdf_get_image_height",
			"pdf_get_image_width",
			"pdf_get_majorversion",
			"pdf_get_minorversion",
			"pdf_get_parameter",
			"pdf_get_pdi_parameter",
			"pdf_get_pdi_value",
			"pdf_get_value",
			"pdf_info_textflow",
			"pdf_initgraphics",
			"pdf_lineto",
			"pdf_load_font",
			"pdf_load_iccprofile",
			"pdf_load_image",
			"pdf_makespotcolor",
			"pdf_moveto",
			"pdf_new",
			"pdf_open_ccitt",
			"pdf_open_file",
			"pdf_open_gif",
			"pdf_open_image",
			"pdf_open_image_file",
			"pdf_open_jpeg",
			"pdf_open_memory_image",
			"pdf_open_pdi",
			"pdf_open_pdi_page",
			"pdf_open_tiff",
			"pdf_place_image",
			"\tpdf_place_pdi_page",
			"pdf_process_pdi",
			"pdf_rect",
			"pdf_restore",
			"pdf_resume_page",
			"pdf_rotate",
			"pdf_save",
			"pdf_scale",
			"pdf_set_border_color",
			"pdf_set_border_dash",
			"pdf_set_border_style",
			"pdf_set_char_spacing",
			"pdf_set_duration",
			"pdf_set_gstate",
			"pdf_set_horiz_scaling",
			"pdf_set_info",
			"pdf_set_info_author",
			"pdf_set_info_creator",
			"pdf_set_info_keywords",
			"pdf_set_info_subject",
			"pdf_set_info_title",
			"pdf_set_layer_dependency",
			"pdf_set_leading",
			"pdf_set_parameter",
			"pdf_set_text_matrix",
			"pdf_set_text_pos",
			"pdf_set_text_rendering",
			"pdf_set_text_rise",
			"pdf_set_value",
			"pdf_set_word_spacing",
			"pdf_setcolor",
			"pdf_setdash",
			"pdf_setdashpattern",
			"pdf_setflat",
			"pdf_setfont",
			"pdf_setgray",
			"pdf_setgray_fill",
			"pdf_setgray_stroke",
			"pdf_setlinecap",
			"pdf_setlinejoin",
			"pdf_setlinewidth",
			"pdf_setmatrix",
			"pdf_setmiterlimit",
			"pdf_setpolydash",
			"pdf_setrgbcolor",
			"pdf_setrgbcolor_fill",
			"pdf_setrgbcolor_stroke",
			"pdf_shading",
			"pdf_shading_pattern",
			"pdf_shfill",
			"pdf_show",
			"pdf_show_boxed",
			"pdf_show_xy",
			"pdf_skew",
			"pdf_stringwidth",
			"pdf_stroke",
			"pdf_suspend_page",
			"pdf_translate",
			"pdf_utf16_to_utf8",
			"pdf_utf8_to_utf16",
			"pdo_begintransaction",
			"pdo_commit",
			"pdo_construct",
			"pdo_errorcode",
			"pdo_errorinfo",
			"pdo_exec",
			"pdo_getattribute",
			"pdo_getavailabledrivers",
			"pdo_lastinsertid",
			"pdo_pgsqllobcreate",
			"pdo_pgsqllobopen",
			"pdo_pgsqllobunlink",
			"pdo_prepare",
			"pdo_query",
			"pdo_quote",
			"pdo_rollback",
			"pdo_setattribute",
			"pdo_sqlitecreateaggregate",
			"pdo_sqlitecreatefunction",
			"pdostatement_bindcolumn",
			"pdostatement_bindparam",
			"pdostatement_bindvalue",
			"pdostatement_closecursor",
			"pdostatement_columncount",
			"pdostatement_errorcode",
			"pdostatement_errorinfo",
			"pdostatement_execute",
			"pdostatement_fetch",
			"pdostatement_fetchall",
			"pdostatement_fetchcolumn",
			"pdostatement_fetchobject",
			"pdostatement_getattribute",
			"pdostatement_getcolumnmeta",
			"pdostatement_nextrowset",
			"pdostatement_rowcount",
			"pdostatement_setattribute",
			"pdostatement_setfetchmode",
			"pfpro_cleanup",
			"pfpro_init",
			"pfpro_process",
			"pfpro_process_raw",
			"pfpro_version",
			"pfsockopen",
			"pg_affected_rows",
			"pg_cancel_query",
			"pg_client_encoding",
			"pg_close",
			"pg_connect",
			"pg_connection_busy",
			"pg_connection_reset",
			"pg_connection_status",
			"pg_convert",
			"pg_copy_from",
			"pg_copy_to",
			"pg_dbname",
			"pg_delete",
			"pg_end_copy",
			"pg_escape_bytea",
			"pg_escape_string",
			"pg_execute",
			"pg_fetch_all",
			"pg_fetch_all_columns",
			"pg_fetch_array",
			"pg_fetch_assoc",
			"pg_fetch_object",
			"pg_fetch_result",
			"pg_fetch_row",
			"pg_field_is_null",
			"pg_field_name",
			"pg_field_num",
			"pg_field_prtlen",
			"pg_field_size",
			"pg_field_table",
			"pg_field_type",
			"pg_field_type_oid",
			"pg_free_result",
			"pg_get_notify",
			"pg_get_pid",
			"pg_get_result",
			"pg_host",
			"pg_insert",
			"pg_last_error",
			"pg_last_notice",
			"pg_last_oid",
			"pg_lo_close",
			"pg_lo_create",
			"pg_lo_export",
			"pg_lo_import",
			"pg_lo_open",
			"pg_lo_read",
			"pg_lo_read_all",
			"pg_lo_seek",
			"pg_lo_tell",
			"pg_lo_unlink",
			"pg_lo_write",
			"pg_meta_data",
			"pg_num_fields",
			"pg_num_rows",
			"pg_options",
			"pg_parameter_status",
			"pg_pconnect",
			"pg_ping",
			"pg_port",
			"pg_prepare",
			"pg_put_line",
			"pg_query",
			"pg_query_params",
			"pg_result_error",
			"pg_result_error_field",
			"pg_result_seek",
			"pg_result_status",
			"pg_select",
			"pg_send_execute",
			"pg_send_prepare",
			"pg_send_query",
			"pg_send_query_params",
			"pg_set_client_encoding",
			"pg_set_error_verbosity",
			"pg_trace",
			"pg_transaction_status",
			"pg_tty",
			"pg_unescape_bytea",
			"pg_untrace",
			"pg_update",
			"pg_version",
			"php_check_syntax",
			"php_ini_scanned_files",
			"php_logo_guid",
			"php_sapi_name",
			"php_strip_whitespace",
			"php_uname",
			"phpcredits",
			"phpinfo",
			"phpversion",
			"pi",
			"png2wbmp",
			"popen",
			"pos",
			"posix_access",
			"posix_ctermid",
			"posix_get_last_error",
			"posix_getcwd",
			"posix_getegid",
			"posix_geteuid",
			"posix_getgid",
			"posix_getgrgid",
			"posix_getgrnam",
			"posix_getgroups",
			"posix_getlogin",
			"posix_getpgid",
			"posix_getpgrp",
			"posix_getpid",
			"posix_getppid",
			"posix_getpwnam",
			"posix_getpwuid",
			"posix_getrlimit",
			"posix_getsid",
			"posix_getuid",
			"posix_isatty",
			"posix_kill",
			"posix_mkfifo",
			"posix_mknod",
			"posix_setegid",
			"posix_seteuid",
			"posix_setgid",
			"posix_setpgid",
			"posix_setsid",
			"posix_setuid",
			"posix_strerror",
			"posix_times",
			"posix_ttyname",
			"posix_uname",
			"pow",
			"preg_grep",
			"preg_last_error",
			"preg_match",
			"preg_match_all",
			"preg_quote",
			"preg_replace",
			"preg_replace_callback",
			"preg_split",
			"prev",
			"print",
			"print_r",
			"printer_abort",
			"printer_close",
			"printer_create_brush",
			"printer_create_dc",
			"printer_create_font",
			"printer_create_pen",
			"printer_delete_brush",
			"printer_delete_dc",
			"printer_delete_font",
			"printer_delete_pen",
			"printer_draw_bmp",
			"printer_draw_chord",
			"printer_draw_elipse",
			"printer_draw_line",
			"printer_draw_pie",
			"printer_draw_rectangle",
			"printer_draw_roundrect",
			"printer_draw_text",
			"printer_end_doc",
			"printer_end_page",
			"printer_get_option",
			"printer_list",
			"printer_logical_fontheight",
			"printer_open",
			"printer_select_brush",
			"printer_select_font",
			"printer_select_pen",
			"printer_set_option",
			"printer_start_doc",
			"printer_start_page",
			"printer_write",
			"printf",
			"proc_close",
			"proc_get_status",
			"proc_nice",
			"proc_open",
			"proc_terminate",
			"property_exists",
			"ps_add_bookmark",
			"ps_add_launchlink",
			"ps_add_locallink",
			"ps_add_note",
			"ps_add_pdflink",
			"ps_add_weblink",
			"ps_arc",
			"ps_arcn",
			"ps_begin_page",
			"ps_begin_pattern",
			"ps_begin_template",
			"ps_circle",
			"ps_clip",
			"ps_close",
			"ps_close_image",
			"ps_closepath",
			"ps_closepath_stroke",
			"ps_continue_text",
			"ps_curveto",
			"ps_delete",
			"ps_end_page",
			"ps_end_pattern",
			"ps_end_template",
			"ps_fill",
			"ps_fill_stroke",
			"ps_findfont",
			"ps_get_buffer",
			"ps_get_parameter",
			"ps_get_value",
			"ps_hyphenate",
			"ps_lineto",
			"ps_makespotcolor",
			"ps_moveto",
			"ps_new",
			"ps_open_file",
			"ps_open_image",
			"ps_open_image_file",
			"ps_place_image",
			"ps_rect",
			"ps_restore",
			"ps_rotate",
			"ps_save",
			"ps_scale",
			"ps_set_border_color",
			"ps_set_border_dash",
			"ps_set_border_style",
			"ps_set_info",
			"ps_set_parameter",
			"ps_set_text_pos",
			"ps_set_value",
			"ps_setcolor",
			"ps_setdash",
			"ps_setflat",
			"ps_setfont",
			"ps_setgray",
			"ps_setlinecap",
			"ps_setlinejoin",
			"ps_setlinewidth",
			"ps_setmiterlimit",
			"ps_setpolydash",
			"ps_shading",
			"ps_shading_pattern",
			"ps_shfill",
			"ps_show",
			"ps_show_boxed",
			"ps_show_xy",
			"ps_string_geometry",
			"ps_stringwidth",
			"ps_stroke",
			"ps_symbol",
			"ps_symbol_name",
			"ps_symbol_width",
			"ps_translate",
			"pspell_add_to_personal",
			"pspell_add_to_session",
			"pspell_check",
			"pspell_clear_session",
			"pspell_config_create",
			"pspell_config_data_dir",
			"pspell_config_dict_dir",
			"pspell_config_ignore",
			"pspell_config_mode",
			"pspell_config_personal",
			"pspell_config_repl",
			"pspell_config_runtogether",
			"pspell_config_save_repl",
			"pspell_new",
			"pspell_new_config",
			"pspell_new_personal",
			"pspell_save_wordlist",
			"pspell_store_replacement",
			"pspell_suggest",
			"putenv",
			"px_close",
			"px_create_fp",
			"px_date2string",
			"px_delete",
			"px_delete_record",
			"px_get_field",
			"px_get_info",
			"px_get_parameter",
			"px_get_record",
			"px_get_schema",
			"px_get_value",
			"px_insert_record",
			"px_new",
			"px_numfields",
			"px_numrecords",
			"px_open_fp",
			"px_put_record",
			"px_retrieve_record",
			"px_set_blob_file",
			"px_set_parameter",
			"px_set_tablename",
			"px_set_targetencoding",
			"px_set_value",
			"px_timestamp2string",
			"px_update_record",
			"qdom_error",
			"qdom_tree",
			"quoted_printable_decode",
			"quotemeta",
			"rad2deg",
			"radius_acct_open",
			"radius_add_server",
			"radius_auth_open",
			"radius_close",
			"radius_config",
			"radius_create_request",
			"radius_cvt_addr",
			"radius_cvt_int",
			"radius_cvt_string",
			"radius_demangle",
			"radius_demangle_mppe_key",
			"radius_get_attr",
			"radius_get_vendor_attr",
			"radius_put_addr",
			"radius_put_attr",
			"radius_put_int",
			"radius_put_string",
			"radius_put_vendor_addr",
			"radius_put_vendor_attr",
			"radius_put_vendor_int",
			"radius_put_vendor_string",
			"radius_request_authenticator",
			"radius_send_request",
			"radius_server_secret",
			"radius_strerror",
			"rand",
			"range",
			"rar_close",
			"rar_entry_get",
			"rar_extract",
			"rar_getattr",
			"rar_getcrc",
			"rar_getfiletime",
			"rar_gethostos",
			"rar_getmethod",
			"rar_getname",
			"rar_getpackedsize",
			"rar_getunpackedsize",
			"rar_getversion",
			"rar_list",
			"rar_open",
			"rawurldecode",
			"rawurlencode",
			"read_exif_data",
			"readdir",
			"readfile",
			"readgzfile",
			"readline",
			"readline_add_history",
			"readline_callback_handler_install",
			"readline_callback_handler_remove",
			"readline_callback_read_char",
			"readline_clear_history",
			"readline_completion_function",
			"readline_info",
			"readline_list_history",
			"readline_on_new_line",
			"readline_read_history",
			"readline_redisplay",
			"readline_write_history",
			"readlink",
			"realpath",
			"recode",
			"recode_file",
			"recode_string",
			"recursivedirectoryiterator_getchildren",
			"recursivedirectoryiterator_haschildren",
			"recursivedirectoryiterator_key",
			"recursivedirectoryiterator_next",
			"recursivedirectoryiterator_rewind",
			"recursiveiteratoriterator_current",
			"recursiveiteratoriterator_getdepth",
			"recursiveiteratoriterator_getsubiterator",
			"recursiveiteratoriterator_key",
			"recursiveiteratoriterator_next",
			"recursiveiteratoriterator_rewind",
			"recursiveiteratoriterator_valid",
			"register_shutdown_function",
			"register_tick_function",
			"rename",
			"rename_function",
            "replace",
			"require",
			"require_once",
			"reset",
			"restore_error_handler",
			"restore_exception_handler",
			"restore_include_path",
			"return",
			"rewind",
			"rewinddir",
			"rmdir",
			"round",
			"rpm_close",
			"rpm_get_tag",
			"rpm_is_valid",
			"rpm_open",
			"rpm_version",
			"rsort",
			"rtrim",
			"runkit_class_adopt",
			"runkit_class_emancipate",
			"runkit_constant_add",
			"runkit_constant_redefine",
			"runkit_constant_remove",
			"runkit_function_add",
			"runkit_function_copy",
			"runkit_function_redefine",
			"runkit_function_remove",
			"runkit_function_rename",
			"runkit_import",
			"runkit_lint",
			"runkit_lint_file",
			"runkit_method_add",
			"runkit_method_copy",
			"runkit_method_redefine",
			"runkit_method_remove",
			"runkit_method_rename",
			"runkit_return_value_used",
			"runkit_sandbox_output_handler",
			"runkit_superglobals",
			"satellite_caught_exception",
			"satellite_exception_id",
			"satellite_exception_value",
			"satellite_get_repository_id",
			"satellite_load_idl",
			"satellite_object_to_string",
			"scandir",
			"sdo_das_changesummary_beginlogging",
			"sdo_das_changesummary_endlogging",
			"sdo_das_changesummary_getchangeddataobjects",
			"sdo_das_changesummary_getchangetype",
			"sdo_das_changesummary_getoldcontainer",
			"sdo_das_changesummary_getoldvalues",
			"sdo_das_changesummary_islogging",
			"sdo_das_datafactory_addpropertytotype",
			"sdo_das_datafactory_addtype",
			"sdo_das_datafactory_getdatafactory",
			"sdo_das_dataobject_getchangesummary",
			"sdo_das_relational_applychanges",
			"sdo_das_relational_construct",
			"sdo_das_relational_createrootdataobject",
			"sdo_das_relational_executepreparedquery",
			"sdo_das_relational_executequery",
			"sdo_das_setting_getlistindex",
			"sdo_das_setting_getpropertyindex",
			"sdo_das_setting_getpropertyname",
			"sdo_das_setting_getvalue",
			"sdo_das_setting_isset",
			"sdo_das_xml_addtypes",
			"sdo_das_xml_create",
			"sdo_das_xml_createdataobject",
			"sdo_das_xml_createdocument",
			"sdo_das_xml_document_getrootdataobject",
			"sdo_das_xml_document_getrootelementname",
			"sdo_das_xml_document_getrootelementuri",
			"sdo_das_xml_document_setencoding",
			"sdo_das_xml_document_setxmldeclaration",
			"sdo_das_xml_document_setxmlversion",
			"sdo_das_xml_loadfile",
			"sdo_das_xml_loadstring",
			"sdo_das_xml_savefile",
			"sdo_das_xml_savestring",
			"sdo_datafactory_create",
			"sdo_dataobject_clear",
			"sdo_dataobject_createdataobject",
			"sdo_dataobject_getcontainer",
			"sdo_dataobject_getsequence",
			"sdo_dataobject_gettypename",
			"sdo_dataobject_gettypenamespaceuri",
			"sdo_exception_getcause",
			"sdo_list_insert",
			"sdo_model_property_getcontainingtype",
			"sdo_model_property_getdefault",
			"sdo_model_property_getname",
			"sdo_model_property_gettype",
			"sdo_model_property_iscontainment",
			"sdo_model_property_ismany",
			"sdo_model_reflectiondataobject_construct",
			"sdo_model_reflectiondataobject_export",
			"sdo_model_reflectiondataobject_getcontainmentproperty",
			"sdo_model_reflectiondataobject_getinstanceproperties",
			"sdo_model_reflectiondataobject_gettype",
			"sdo_model_type_getbasetype",
			"sdo_model_type_getname",
			"sdo_model_type_getnamespaceuri",
			"sdo_model_type_getproperties",
			"sdo_model_type_getproperty",
			"sdo_model_type_isabstracttype",
			"sdo_model_type_isdatatype",
			"sdo_model_type_isinstance",
			"sdo_model_type_isopentype",
			"sdo_model_type_issequencedtype",
			"sdo_sequence_getproperty",
			"sdo_sequence_insert",
			"sdo_sequence_move",
			"sem_acquire",
			"sem_get",
			"sem_release",
			"sem_remove",
			"serialize",
			"sesam_affected_rows",
			"sesam_commit",
			"sesam_connect",
			"sesam_diagnostic",
			"sesam_disconnect",
			"sesam_errormsg",
			"sesam_execimm",
			"sesam_fetch_array",
			"sesam_fetch_result",
			"sesam_fetch_row",
			"sesam_field_array",
			"sesam_field_name",
			"sesam_free_result",
			"sesam_num_fields",
			"sesam_query",
			"sesam_rollback",
			"sesam_seek_row",
			"sesam_settransaction",
			"session_cache_expire",
			"session_cache_limiter",
			"session_commit",
			"session_decode",
			"session_destroy",
			"session_encode",
			"session_get_cookie_params",
			"session_id",
			"session_is_registered",
			"session_module_name",
			"session_name",
			"session_pgsql_add_error",
			"session_pgsql_get_error",
			"session_pgsql_get_field",
			"session_pgsql_reset",
			"session_pgsql_set_field",
			"session_pgsql_status",
			"session_regenerate_id",
			"session_register",
			"session_save_path",
			"session_set_cookie_params",
			"session_set_save_handler",
			"session_start",
			"session_unregister",
			"session_unset",
			"session_write_close",
			"set_error_handler",
			"set_exception_handler",
			"set_file_buffer",
			"set_include_path",
			"set_magic_quotes_runtime",
			"set_time_limit",
			"setcookie",
			"setlocale",
			"setrawcookie",
			"settype",
			"sha1",
			"sha1_file",
			"shell_exec",
			"shm_attach",
			"shm_detach",
			"shm_get_var",
			"shm_put_var",
			"shm_remove",
			"shm_remove_var",
			"shmop_close",
			"shmop_delete",
			"shmop_open",
			"shmop_read",
			"shmop_size",
			"shmop_write",
			"show_source",
			"shuffle",
			"similar_text",
			"simplexml_element_addattribute",
			"simplexml_element_addchild",
			"simplexml_element_asxml",
			"simplexml_element_attributes",
			"simplexml_element_children",
			"simplexml_element_construct",
			"simplexml_element_getdocnamespaces",
			"simplexml_element_getname",
			"simplexml_element_getnamespaces",
			"simplexml_element_registerxpathnamespace",
			"simplexml_element_xpath",
			"simplexml_import_dom",
			"simplexml_load_file",
			"simplexml_load_string",
			"simplexmliterator_current",
			"simplexmliterator_getchildren",
			"simplexmliterator_haschildren",
			"simplexmliterator_key",
			"simplexmliterator_next",
			"simplexmliterator_rewind",
			"simplexmliterator_valid",
			"sin",
			"sinh",
			"sizeof",
			"sleep",
			"snmp_get_quick_print",
			"snmp_get_valueretrieval",
			"snmp_read_mib",
			"snmp_set_enum_print",
			"snmp_set_oid_numeric_print",
			"snmp_set_quick_print",
			"snmp_set_valueretrieval",
			"snmpget",
			"snmpgetnext",
			"snmprealwalk",
			"snmpset",
			"snmpwalk",
			"snmpwalkoid",
			"soap_soapclient_call",
			"soap_soapclient_construct",
			"soap_soapclient_dorequest",
			"soap_soapclient_getfunctions",
			"soap_soapclient_getlastrequest",
			"soap_soapclient_getlastrequestheaders",
			"soap_soapclient_getlastresponse",
			"soap_soapclient_getlastresponseheaders",
			"soap_soapclient_gettypes",
			"soap_soapclient_setcookie",
			"soap_soapclient_soapcall",
			"soap_soapfault_construct",
			"soap_soapheader_construct",
			"soap_soapparam_construct",
			"soap_soapserver_addfunction",
			"soap_soapserver_construct",
			"soap_soapserver_fault",
			"soap_soapserver_getfunctions",
			"soap_soapserver_handle",
			"soap_soapserver_setclass",
			"soap_soapserver_setpersistence",
			"soap_soapvar_construct",
			"socket_accept",
			"socket_bind",
			"socket_clear_error",
			"socket_close",
			"socket_connect",
			"socket_create",
			"socket_create_listen",
			"socket_create_pair",
			"socket_get_option",
			"socket_get_status",
			"socket_getpeername",
			"socket_getsockname",
			"socket_last_error",
			"socket_listen",
			"socket_read",
			"socket_recv",
			"socket_recvfrom",
			"socket_select",
			"socket_send",
			"socket_sendto",
			"socket_set_block",
			"socket_set_blocking",
			"socket_set_nonblock",
			"socket_set_option",
			"socket_set_timeout",
			"socket_shutdown",
			"socket_strerror",
			"socket_write",
			"sort",
			"soundex",
			"spl_autoload",
			"spl_autoload_call",
			"spl_autoload_extensions",
			"spl_autoload_functions",
			"spl_autoload_register",
			"spl_autoload_unregister",
			"spl_classes",
			"split",
			"spliti",
			"sprintf",
			"sql_regcase",
			"sqlite_array_query",
			"sqlite_busy_timeout",
			"sqlite_changes",
			"sqlite_close",
			"sqlite_column",
			"sqlite_create_aggregate",
			"sqlite_create_function",
			"sqlite_current",
			"sqlite_error_string",
			"sqlite_escape_string",
			"sqlite_exec",
			"sqlite_factory",
			"sqlite_fetch_all",
			"sqlite_fetch_array",
			"sqlite_fetch_column_types",
			"sqlite_fetch_object",
			"sqlite_fetch_single",
			"sqlite_fetch_string",
			"sqlite_field_name",
			"sqlite_has_more",
			"sqlite_has_prev",
			"sqlite_key",
			"sqlite_last_error",
			"sqlite_last_insert_rowid",
			"sqlite_libencoding",
			"sqlite_libversion",
			"sqlite_next",
			"sqlite_num_fields",
			"sqlite_num_rows",
			"sqlite_open",
			"sqlite_popen",
			"sqlite_prev",
			"sqlite_query",
			"sqlite_rewind",
			"sqlite_seek",
			"sqlite_single_query",
			"sqlite_udf_decode_binary",
			"sqlite_udf_encode_binary",
			"sqlite_unbuffered_query",
			"sqlite_valid",
			"sqrt",
			"srand",
			"sscanf",
			"ssh2_auth_hostbased_file",
			"ssh2_auth_none",
			"ssh2_auth_password",
			"ssh2_auth_pubkey_file",
			"ssh2_connect",
			"ssh2_exec",
			"ssh2_fetch_stream",
			"ssh2_fingerprint",
			"ssh2_methods_negotiated",
			"ssh2_publickey_add",
			"ssh2_publickey_init",
			"ssh2_publickey_list",
			"ssh2_publickey_remove",
			"ssh2_scp_recv",
			"ssh2_scp_send",
			"ssh2_sftp",
			"ssh2_sftp_lstat",
			"ssh2_sftp_mkdir",
			"ssh2_sftp_readlink",
			"ssh2_sftp_realpath",
			"ssh2_sftp_rename",
			"ssh2_sftp_rmdir",
			"ssh2_sftp_stat",
			"ssh2_sftp_symlink",
			"ssh2_sftp_unlink",
			"ssh2_shell",
			"ssh2_tunnel",
			"stat",
			"stats_absolute_deviation",
			"stats_cdf_beta",
			"stats_cdf_binomial",
			"stats_cdf_cauchy",
			"stats_cdf_chisquare",
			"stats_cdf_exponential",
			"stats_cdf_f",
			"stats_cdf_gamma",
			"stats_cdf_laplace",
			"stats_cdf_logistic",
			"stats_cdf_negative_binomial",
			"stats_cdf_noncentral_chisquare",
			"stats_cdf_noncentral_f",
			"stats_cdf_poisson",
			"stats_cdf_t",
			"stats_cdf_uniform",
			"stats_cdf_weibull",
			"stats_covariance",
			"stats_den_uniform",
			"stats_dens_beta",
			"stats_dens_cauchy",
			"stats_dens_chisquare",
			"stats_dens_exponential",
			"stats_dens_f",
			"stats_dens_gamma",
			"stats_dens_laplace",
			"stats_dens_logistic",
			"stats_dens_negative_binomial",
			"stats_dens_normal",
			"stats_dens_pmf_binomial",
			"stats_dens_pmf_hypergeometric",
			"stats_dens_pmf_poisson",
			"stats_dens_t",
			"stats_dens_weibull",
			"stats_harmonic_mean",
			"stats_kurtosis",
			"stats_rand_gen_beta",
			"stats_rand_gen_chisquare",
			"stats_rand_gen_exponential",
			"stats_rand_gen_f",
			"stats_rand_gen_funiform",
			"stats_rand_gen_gamma",
			"stats_rand_gen_ibinomial",
			"stats_rand_gen_ibinomial_negative",
			"stats_rand_gen_int",
			"stats_rand_gen_ipoisson",
			"stats_rand_gen_iuniform",
			"stats_rand_gen_noncenral_chisquare",
			"stats_rand_gen_noncentral_f",
			"stats_rand_gen_noncentral_t",
			"stats_rand_gen_normal",
			"stats_rand_gen_t",
			"stats_rand_get_seeds",
			"stats_rand_phrase_to_seeds",
			"stats_rand_ranf",
			"stats_rand_setall",
			"stats_skew",
			"stats_standard_deviation",
			"stats_stat_binomial_coef",
			"stats_stat_correlation",
			"stats_stat_gennch",
			"stats_stat_independent_t",
			"stats_stat_innerproduct",
			"stats_stat_noncentral_t",
			"stats_stat_paired_t",
			"stats_stat_percentile",
			"stats_stat_powersum",
			"stats_variance",
			"str_ireplace",
			"str_pad",
			"str_repeat",
			"str_replace",
			"str_rot13",
			"str_shuffle",
			"str_split",
			"str_word_count",
			"strcasecmp",
			"strchr",
			"strcmp",
			"strcoll",
			"strcspn",
			"stream_bucket_append",
			"stream_bucket_make_writeable",
			"stream_bucket_new",
			"stream_bucket_prepend",
			"stream_context_create",
			"stream_context_get_default",
			"stream_context_get_options",
			"stream_context_set_option",
			"stream_context_set_params",
			"stream_copy_to_stream",
			"stream_filter_append",
			"stream_filter_prepend",
			"stream_filter_register",
			"stream_filter_remove",
			"stream_get_contents",
			"stream_get_filters",
			"stream_get_line",
			"stream_get_meta_data",
			"stream_get_transports",
			"stream_get_wrappers",
			"stream_register_wrapper",
			"stream_select",
			"stream_set_blocking",
			"stream_set_timeout",
			"stream_set_write_buffer",
			"stream_socket_accept",
			"stream_socket_client",
			"stream_socket_enable_crypto",
			"stream_socket_get_name",
			"stream_socket_pair",
			"stream_socket_recvfrom",
			"stream_socket_sendto",
			"stream_socket_server",
			"stream_wrapper_register",
			"stream_wrapper_restore",
			"stream_wrapper_unregister",
			"strftime",
			"strip_tags",
			"stripcslashes",
			"stripos",
			"stripslashes",
			"stristr",
			"strlen",
			"strnatcasecmp",
			"strnatcmp",
			"strncasecmp",
			"strncmp",
			"strpbrk",
			"strpos",
			"strptime",
			"strrchr",
			"strrev",
			"strripos",
			"strrpos",
			"strspn",
			"strstr",
			"strtok",
			"strtolower",
			"strtotime",
			"strtoupper",
			"strtr",
			"strval",
			"substr",
			"substr_compare",
			"substr_count",
			"substr_replace",
			"swf_actiongeturl",
			"swf_actiongotoframe",
			"swf_actiongotolabel",
			"swf_actionnextframe",
			"swf_actionplay",
			"swf_actionprevframe",
			"swf_actionsettarget",
			"swf_actionstop",
			"swf_actiontogglequality",
			"swf_actionwaitforframe",
			"swf_addbuttonrecord",
			"swf_addcolor",
			"swf_closefile",
			"swf_definebitmap",
			"swf_definefont",
			"swf_defineline",
			"swf_definepoly",
			"swf_definerect",
			"swf_definetext",
			"swf_endbutton",
			"swf_enddoaction",
			"swf_endshape",
			"swf_endsymbol",
			"swf_fontsize",
			"swf_fontslant",
			"swf_fonttracking",
			"swf_getbitmapinfo",
			"swf_getfontinfo",
			"swf_getframe",
			"swf_labelframe",
			"swf_lookat",
			"swf_modifyobject",
			"swf_mulcolor",
			"swf_nextid",
			"swf_oncondition",
			"swf_openfile",
			"swf_ortho",
			"swf_ortho2",
			"swf_perspective",
			"swf_placeobject",
			"swf_polarview",
			"swf_popmatrix",
			"swf_posround",
			"swf_pushmatrix",
			"swf_removeobject",
			"swf_rotate",
			"swf_scale",
			"swf_setfont",
			"swf_setframe",
			"swf_shapearc",
			"swf_shapecurveto",
			"swf_shapecurveto3",
			"swf_shapefillbitmapclip",
			"swf_shapefillbitmaptile",
			"swf_shapefilloff",
			"swf_shapefillsolid",
			"swf_shapelinesolid",
			"swf_shapelineto",
			"swf_shapemoveto",
			"swf_showframe",
			"swf_startbutton",
			"swf_startdoaction",
			"swf_startshape",
			"swf_startsymbol",
			"swf_textwidth",
			"swf_translate",
			"swf_viewport",
			"swfaction",
			"swfbitmap",
			"swfbitmap.getheight",
			"swfbitmap.getwidth",
			"swfbutton",
			"swfbutton.addaction",
			"swfbutton.addasound",
			"swfbutton.addshape",
			"swfbutton.setaction",
			"swfbutton.setdown",
			"swfbutton.sethit",
			"swfbutton.setmenu",
			"swfbutton.setover",
			"swfbutton.setup",
			"swfdisplayitem.addaction",
			"swfdisplayitem.addcolor",
			"swfdisplayitem.endmask",
			"swfdisplayitem.getrot",
			"swfdisplayitem.getx",
			"swfdisplayitem.getxscale",
			"swfdisplayitem.getxskew",
			"swfdisplayitem.gety",
			"swfdisplayitem.getyscale",
			"swfdisplayitem.getyskew",
			"swfdisplayitem.move",
			"swfdisplayitem.moveto",
			"swfdisplayitem.multcolor",
			"swfdisplayitem.remove",
			"swfdisplayitem.rotate",
			"swfdisplayitem.rotateto",
			"swfdisplayitem.scale",
			"swfdisplayitem.scaleto",
			"swfdisplayitem.setdepth",
			"swfdisplayitem.setmasklevel",
			"swfdisplayitem.setmatrix",
			"swfdisplayitem.setname",
			"swfdisplayitem.setratio",
			"swfdisplayitem.skewx",
			"swfdisplayitem.skewxto",
			"swfdisplayitem.skewy",
			"swfdisplayitem.skewyto",
			"swffill",
			"swffill.moveto",
			"swffill.rotateto",
			"swffill.scaleto",
			"swffill.skewxto",
			"swffill.skewyto",
			"swffont",
			"swffont.getascent",
			"swffont.getdescent",
			"swffont.getleading",
			"swffont.getshape",
			"swffont.getutf8width",
			"swffont.getwidth",
			"swffontchar.addchars",
			"swffontchar.addutf8chars",
			"swfgradient",
			"swfgradient.addentry",
			"swfmorph",
			"swfmorph.getshape1",
			"swfmorph.getshape2",
			"swfmovie",
			"swfmovie.add",
			"swfmovie.addexport",
			"swfmovie.addfont",
			"swfmovie.importchar",
			"swfmovie.importfont",
			"swfmovie.labelframe",
			"swfmovie.nextframe",
			"swfmovie.output",
			"swfmovie.remove",
			"swfmovie.save",
			"swfmovie.savetofile",
			"swfmovie.setbackground",
			"swfmovie.setdimension",
			"swfmovie.setframes",
			"swfmovie.setrate",
			"swfmovie.startsound",
			"swfmovie.stopsound",
			"swfmovie.streammp3",
			"swfmovie.writeexports",
			"swfprebuiltclip",
			"swfshape",
			"swfshape.addfill",
			"swfshape.drawarc",
			"swfshape.drawcircle",
			"swfshape.drawcubic",
			"swfshape.drawcubicto",
			"swfshape.drawcurve",
			"swfshape.drawcurveto",
			"swfshape.drawglyph",
			"swfshape.drawline",
			"swfshape.drawlineto",
			"swfshape.movepen",
			"swfshape.movepento",
			"swfshape.setleftfill",
			"swfshape.setline",
			"swfshape.setrightfill",
			"swfsound",
			"swfsoundinstance.loopcount",
			"swfsoundinstance.loopinpoint",
			"swfsoundinstance.loopoutpoint",
			"swfsoundinstance.nomultiple",
			"swfsprite",
			"swfsprite.add",
			"swfsprite.labelframe",
			"swfsprite.nextframe",
			"swfsprite.remove",
			"swfsprite.setframes",
			"swfsprite.startsound",
			"swfsprite.stopsound",
			"swftext",
			"swftext.addstring",
			"swftext.addutf8string",
			"swftext.getascent",
			"swftext.getdescent",
			"swftext.getleading",
			"swftext.getutf8width",
			"swftext.getwidth",
			"swftext.moveto",
			"swftext.setcolor",
			"swftext.setfont",
			"swftext.setheight",
			"swftext.setspacing",
			"swftextfield",
			"swftextfield.addchars",
			"swftextfield.addstring",
			"swftextfield.align",
			"swftextfield.setbounds",
			"swftextfield.setcolor",
			"swftextfield.setfont",
			"swftextfield.setheight",
			"swftextfield.setindentation",
			"swftextfield.setleftmargin",
			"swftextfield.setlinespacing",
			"swftextfield.setmargins",
			"swftextfield.setname",
			"swftextfield.setpadding",
			"swftextfield.setrightmargin",
			"swfvideostream",
			"swfvideostream.getnumframes",
			"swfvideostream.setdimension",
			"sybase_affected_rows",
			"sybase_close",
			"sybase_connect",
			"sybase_data_seek",
			"sybase_deadlock_retry_count",
			"sybase_fetch_array",
			"sybase_fetch_assoc",
			"sybase_fetch_field",
			"sybase_fetch_object",
			"sybase_fetch_row",
			"sybase_field_seek",
			"sybase_free_result",
			"sybase_get_last_message",
			"sybase_min_client_severity",
			"sybase_min_error_severity",
			"sybase_min_message_severity",
			"sybase_min_server_severity",
			"sybase_num_fields",
			"sybase_num_rows",
			"sybase_pconnect",
			"sybase_query",
			"sybase_result",
			"sybase_select_db",
			"sybase_set_message_handler",
			"sybase_unbuffered_query",
			"symlink",
			"sys_get_temp_dir",
			"sys_getloadavg",
			"syslog",
			"system",
			"tan",
			"tanh",
			"tcpwrap_check",
			"tempnam",
			"textdomain",
			"tidy_access_count",
			"tidy_clean_repair",
			"tidy_config_count",
			"tidy_construct",
			"tidy_diagnose",
			"tidy_error_count",
			"tidy_get_body",
			"tidy_get_config",
			"tidy_get_error_buffer",
			"tidy_get_head",
			"tidy_get_html",
			"tidy_get_html_ver",
			"tidy_get_opt_doc",
			"tidy_get_output",
			"tidy_get_release",
			"tidy_get_root",
			"tidy_get_status",
			"tidy_getopt",
			"tidy_is_xhtml",
			"tidy_is_xml",
			"tidy_load_config",
			"tidy_node_get_attr",
			"tidy_node_get_nodes",
			"tidy_node_next",
			"tidy_node_prev",
			"tidy_parse_file",
			"tidy_parse_string",
			"tidy_repair_file",
			"tidy_repair_string",
			"tidy_reset_config",
			"tidy_save_config",
			"tidy_set_encoding",
			"tidy_setopt",
			"tidy_warning_count",
			"tidynode_haschildren",
			"tidynode_hassiblings",
			"tidynode_isasp",
			"tidynode_iscomment",
			"tidynode_ishtml",
			"tidynode_isjste",
			"tidynode_isphp",
			"tidynode_istext",
			"time",
			"time_nanosleep",
			"time_sleep_until",
			"tmpfile",
			"token_get_all",
			"token_name",
			"touch",
			"trigger_error",
			"trim",
			"uasort",
			"ucfirst",
			"ucwords",
			"udm_add_search_limit",
			"udm_alloc_agent",
			"udm_alloc_agent_array",
			"udm_api_version",
			"udm_cat_list",
			"udm_cat_path",
			"udm_check_charset",
			"udm_check_stored",
			"udm_clear_search_limits",
			"udm_close_stored",
			"udm_crc32",
			"udm_errno",
			"udm_error",
			"udm_find",
			"udm_free_agent",
			"udm_free_ispell_data",
			"udm_free_res",
			"udm_get_doc_count",
			"udm_get_res_field",
			"udm_get_res_param",
			"udm_hash32",
			"udm_load_ispell_data",
			"udm_open_stored",
			"udm_set_agent_param",
			"uksort",
			"umask",
			"unicode_encode",
			"unicode_semantics",
			"uniqid",
			"unixtojd",
			"unlink",
			"unpack",
			"unregister_tick_function",
			"unserialize",
			"unset",
			"urldecode",
			"urlencode",
			"use_soap_error_handler",
			"user_error",
			"usleep",
			"usort",
			"utf8_decode",
			"utf8_encode",
			"var_dump",
			"var_export",
			"variant",
			"variant_abs",
			"variant_add",
			"variant_and",
			"variant_cast",
			"variant_cat",
			"variant_cmp",
			"variant_date_from_timestamp",
			"variant_date_to_timestamp",
			"variant_div",
			"variant_eqv",
			"variant_fix",
			"variant_get_type",
			"variant_idiv",
			"variant_imp",
			"variant_int",
			"variant_mod",
			"variant_mul",
			"variant_neg",
			"variant_not",
			"variant_or",
			"variant_pow",
			"variant_round",
			"variant_set",
			"variant_set_type",
			"variant_sub",
			"variant_xor",
			"version_compare",
			"vfprintf",
			"virtual",
			"vpopmail_add_alias_domain",
			"vpopmail_add_alias_domain_ex",
			"vpopmail_add_domain",
			"vpopmail_add_domain_ex",
			"vpopmail_add_user",
			"vpopmail_alias_add",
			"vpopmail_alias_del",
			"vpopmail_alias_del_domain",
			"vpopmail_alias_get",
			"vpopmail_alias_get_all",
			"vpopmail_auth_user",
			"vpopmail_del_domain",
			"vpopmail_del_domain_ex",
			"vpopmail_del_user",
			"vpopmail_error",
			"vpopmail_passwd",
			"vpopmail_set_user_quota",
			"vprintf",
			"vsprintf",
			"w32api_deftype",
			"w32api_init_dtype",
			"w32api_invoke_function",
			"w32api_register_function",
			"w32api_set_call_method",
			"wddx_add_vars",
			"wddx_deserialize",
			"wddx_packet_end",
			"wddx_packet_start",
			"wddx_serialize_value",
			"wddx_serialize_vars",
			"wddx_unserialize",
			"win32_create_service",
			"win32_delete_service",
			"win32_get_last_control_message",
			"win32_ps_list_procs",
			"win32_ps_stat_mem",
			"win32_ps_stat_proc",
			"win32_query_service_status",
			"win32_set_service_status",
			"win32_start_service",
			"win32_start_service_ctrl_dispatcher",
			"win32_stop_service",
			"wordwrap",
			"xattr_get",
			"xattr_list",
			"xattr_remove",
			"xattr_set",
			"xattr_supported",
			"xdiff_file_diff",
			"xdiff_file_diff_binary",
			"xdiff_file_merge3",
			"xdiff_file_patch",
			"xdiff_file_patch_binary",
			"xdiff_string_diff",
			"xdiff_string_diff_binary",
			"xdiff_string_merge3",
			"xdiff_string_patch",
			"xdiff_string_patch_binary",
			"xml_error_string",
			"xml_get_current_byte_index",
			"xml_get_current_column_number",
			"xml_get_current_line_number",
			"xml_get_error_code",
			"xml_parse",
			"xml_parse_into_struct",
			"xml_parser_create",
			"xml_parser_create_ns",
			"xml_parser_free",
			"xml_parser_get_option",
			"xml_parser_set_option",
			"xml_set_character_data_handler",
			"xml_set_default_handler",
			"xml_set_element_handler",
			"xml_set_end_namespace_decl_handler",
			"xml_set_external_entity_ref_handler",
			"xml_set_notation_decl_handler",
			"xml_set_object",
			"xml_set_processing_instruction_handler",
			"xml_set_start_namespace_decl_handler",
			"xml_set_unparsed_entity_decl_handler",
			"xmlreader_close",
			"xmlreader_expand",
			"xmlreader_getattribute",
			"xmlreader_getattributeno",
			"xmlreader_getattributens",
			"xmlreader_getparserproperty",
			"xmlreader_isvalid",
			"xmlreader_lookupnamespace",
			"xmlreader_movetoattribute",
			"xmlreader_movetoattributeno",
			"xmlreader_movetoattributens",
			"xmlreader_movetoelement",
			"xmlreader_movetofirstattribute",
			"xmlreader_movetonextattribute",
			"xmlreader_next",
			"xmlreader_open",
			"xmlreader_read",
			"xmlreader_setparserproperty",
			"xmlreader_setrelaxngschema",
			"xmlreader_setrelaxngschemasource",
			"xmlreader_xml",
			"xmlrpc_decode",
			"xmlrpc_decode_request",
			"xmlrpc_encode",
			"xmlrpc_encode_request",
			"xmlrpc_get_type",
			"xmlrpc_is_fault",
			"xmlrpc_parse_method_descriptions",
			"xmlrpc_server_add_introspection_data",
			"xmlrpc_server_call_method",
			"xmlrpc_server_create",
			"xmlrpc_server_destroy",
			"xmlrpc_server_register_introspection_callback",
			"xmlrpc_server_register_method",
			"xmlrpc_set_type",
			"xmlwriter_end_attribute",
			"xmlwriter_end_cdata",
			"xmlwriter_end_comment",
			"xmlwriter_end_document",
			"xmlwriter_end_dtd",
			"xmlwriter_end_dtd_attlist",
			"xmlwriter_end_dtd_element",
			"xmlwriter_end_dtd_entity",
			"xmlwriter_end_element",
			"xmlwriter_end_pi",
			"xmlwriter_flush",
			"xmlwriter_full_end_element",
			"xmlwriter_open_memory",
			"xmlwriter_open_uri",
			"xmlwriter_output_memory",
			"xmlwriter_set_indent",
			"xmlwriter_set_indent_string",
			"xmlwriter_start_attribute",
			"xmlwriter_start_attribute_ns",
			"xmlwriter_start_cdata",
			"xmlwriter_start_comment",
			"xmlwriter_start_document",
			"xmlwriter_start_dtd",
			"xmlwriter_start_dtd_attlist",
			"xmlwriter_start_dtd_element",
			"xmlwriter_start_dtd_entity",
			"xmlwriter_start_element",
			"xmlwriter_start_element_ns",
			"xmlwriter_start_pi",
			"xmlwriter_text",
			"xmlwriter_write_attribute",
			"xmlwriter_write_attribute_ns",
			"xmlwriter_write_cdata",
			"xmlwriter_write_comment",
			"xmlwriter_write_dtd",
			"xmlwriter_write_dtd_attlist",
			"xmlwriter_write_dtd_element",
			"xmlwriter_write_dtd_entity",
			"xmlwriter_write_element",
			"xmlwriter_write_element_ns",
			"xmlwriter_write_pi",
			"xmlwriter_write_raw",
			"xpath_eval",
			"xpath_eval_expression",
			"xpath_new_context",
			"xpath_register_ns",
			"xpath_register_ns_auto",
			"xptr_eval",
			"xptr_new_context",
			"xsl_xsltprocessor_construct",
			"xsl_xsltprocessor_get_parameter",
			"xsl_xsltprocessor_has_exslt_support",
			"xsl_xsltprocessor_import_stylesheet",
			"xsl_xsltprocessor_register_php_functions",
			"xsl_xsltprocessor_remove_parameter",
			"xsl_xsltprocessor_set_parameter",
			"xsl_xsltprocessor_transform_to_doc",
			"xsl_xsltprocessor_transform_to_uri",
			"xsl_xsltprocessor_transform_to_xml",
			"xslt_backend_info",
			"xslt_backend_name",
			"xslt_backend_version",
			"xslt_create",
			"xslt_errno",
			"xslt_error",
			"xslt_free",
			"xslt_getopt",
			"xslt_process",
			"xslt_set_base",
			"xslt_set_encoding",
			"xslt_set_error_handler",
			"xslt_set_log",
			"xslt_set_object",
			"xslt_set_sax_handler",
			"xslt_set_sax_handlers",
			"xslt_set_scheme_handler",
			"xslt_set_scheme_handlers",
			"xslt_setopt",
			"yaz_addinfo",
			"yaz_ccl_conf",
			"yaz_ccl_parse",
			"yaz_close",
			"yaz_connect",
			"yaz_database",
			"yaz_element",
			"yaz_errno",
			"yaz_error",
			"yaz_es",
			"yaz_es_result",
			"yaz_get_option",
			"yaz_hits",
			"yaz_itemorder",
			"yaz_present",
			"yaz_range",
			"yaz_record",
			"yaz_scan",
			"yaz_scan_result",
			"yaz_schema",
			"yaz_search",
			"yaz_set_option",
			"yaz_sort",
			"yaz_syntax",
			"yaz_wait",
			"yp_all",
			"yp_cat",
			"yp_err_string",
			"yp_errno",
			"yp_first",
			"yp_get_default_domain",
			"yp_master",
			"yp_match",
			"yp_next",
			"yp_order",
			"zend_logo_guid",
			"zend_version",
			"zip_close",
			"zip_entry_close",
			"zip_entry_compressedsize",
			"zip_entry_compressionmethod",
			"zip_entry_filesize",
			"zip_entry_name",
			"zip_entry_open",
			"zip_entry_read",
			"zip_open",
			"zip_read",
			"zlib_get_coding_type"
		});

        private void btnAddVar_Click(object sender, EventArgs e)
        {
            if (txtVarName.Text.Trim().Length > 0)
                if (!lstPHPVars.Items.Contains(txtVarName.Text.Trim()))
                    lstPHPVars.Items.Add(txtVarName.Text.Trim());
        }

        private void txtAddFunc_Click(object sender, EventArgs e)
        {
            if (txtFuncName.Text.Trim().Length > 0)
                if (!lstFunctions.Items.Contains(txtFuncName.Text.Trim()))
                    lstFunctions.Items.Add(txtFuncName.Text.Trim());
        }

        private void btnRemoveVar_Click(object sender, EventArgs e)
        {
            try { lstPHPVars.Items.RemoveAt(lstPHPVars.SelectedIndex); }
            catch { }
        }

        private void txtRemoveFunc_Click(object sender, EventArgs e)
        {
            try { lstFunctions.Items.RemoveAt(lstFunctions.SelectedIndex); }
            catch { }
        }

        private void btnSelectAllVars_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < lstPHPVars.Items.Count; i++)
                lstPHPVars.SetItemChecked(i, true);
        }

        private void btnSelectAllFunc_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < lstFunctions.Items.Count; i++)
                lstFunctions.SetItemChecked(i, true);
        }

        private void txtDirectory_TextChanged(object sender, EventArgs e)
        {
            if (Directory.Exists(txtDirectory.Text.Trim()) && txtDirectory.Text.Trim().Length > 3)
            {
                root_path = txtDirectory.Text.Trim();
                GUID = DateTime.Now.ToString().Replace(':', '-').Replace('/', '-');
                txtDirectory.Text = root_path;
                lstFiles.Items.Clear();
                OpenDirectory(root_path);
                txtOutDirectory.Text = txtDirectory.Text + "_obfuscated(" + GUID + ")";
            }
            else
            {
                root_path = "";
                txtOutDirectory.Text = "";
                lstFiles.Items.Clear();
            }
        }

        internal enum ProcessCreationFlags : uint
        {
            ZERO_FLAG = 0x00000000,
            CREATE_BREAKAWAY_FROM_JOB = 0x01000000,
            CREATE_DEFAULT_ERROR_MODE = 0x04000000,
            CREATE_NEW_CONSOLE = 0x00000010,
            CREATE_NEW_PROCESS_GROUP = 0x00000200,
            CREATE_NO_WINDOW = 0x08000000,
            CREATE_PROTECTED_PROCESS = 0x00040000,
            CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,
            CREATE_SEPARATE_WOW_VDM = 0x00001000,
            CREATE_SHARED_WOW_VDM = 0x00001000,
            CREATE_SUSPENDED = 0x00000004,
            CREATE_UNICODE_ENVIRONMENT = 0x00000400,
            DEBUG_ONLY_THIS_PROCESS = 0x00000002,
            DEBUG_PROCESS = 0x00000001,
            DETACHED_PROCESS = 0x00000008,
            EXTENDED_STARTUPINFO_PRESENT = 0x00080000,
            INHERIT_PARENT_AFFINITY = 0x00010000
        }

        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public uint dwProcessId;
            public IntPtr dwThreadId;
        }

        public struct STARTUPINFO
        {
            public uint cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public uint dwX;
            public uint dwY;
            public uint dwXSize;
            public uint dwYSize;
            public uint dwXCountChars;
            public uint dwYCountChars;
            public uint dwFillAttribute;
            public uint dwFlags;
            public short wShowWindow;
            public short cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        public struct SECURITY_ATTRIBUTES
        {
            public int length;
            public IntPtr lpSecurityDescriptor;
            public bool bInheritHandle;
        }

        public String AlignDWORD(IntPtr word)
        {
            long ADDWORD;
            String ADpStr, ADpStr2, ADresultStr;

            ADDWORD = (long)Convert.ToInt32(word.ToString());
            ADpStr = Convert.ToString(ADDWORD, 16);
            ADpStr2 = "";

            Int32 ADpStrLength = ADpStr.Length;

            int i = 0;
            for (i = 0; i < 8 - ADpStrLength; i++)
                ADpStr2 = ADpStr2.Insert(i, "0");

            int j = 0;
            int t = i;
            for (i = t; i < 8; i++)
            {
                ADpStr2 = ADpStr2.Insert(i, ADpStr[j].ToString());
                j++;
            }

            ADresultStr = "";

            ADresultStr = ADresultStr.Insert(0, ADpStr2[6].ToString());
            ADresultStr = ADresultStr.Insert(1, ADpStr2[7].ToString());
            ADresultStr = ADresultStr.Insert(2, ADpStr2[4].ToString());
            ADresultStr = ADresultStr.Insert(3, ADpStr2[5].ToString());
            ADresultStr = ADresultStr.Insert(4, ADpStr2[2].ToString());
            ADresultStr = ADresultStr.Insert(5, ADpStr2[3].ToString());
            ADresultStr = ADresultStr.Insert(6, ADpStr2[0].ToString());
            ADresultStr = ADresultStr.Insert(7, ADpStr2[1].ToString());

            return ADresultStr.ToUpper();
        }

        protected string WindowsName()
        {
            byte[] pBytes = new byte[25];
            string Name = Convert.ToString(ASCIIEncoding.ASCII.GetString(new byte[] { 0 }));
            for (int i = 0; i < Name.Length; i++)
                if ((int)Name[i] == 0)
                    return Name.Substring(0, i);
            return "";
        }

        public Byte[] ToByteArray(String pStr)
        {
            Byte[] pByte = new Byte[pStr.Length / 2];
            Int32 i, j;
            j = -1;
            Int32 pStrLength = pStr.Length;
            try
            {
                for (i = 0; i < pStrLength; i += 2)
                {
                    j++;
                    pByte[j] = Convert.ToByte(Convert.ToInt32("0x" + pStr.Substring(i, 2), 16));
                }
            }
            catch { }
            return pByte;
        }

        private static RNGCryptoServiceProvider csp = new RNGCryptoServiceProvider();

        public uint NextUInt32()
        {
            byte[] res = new byte[4];
            csp.GetBytes(res);
            return BitConverter.ToUInt32(res, 0);
        }

        public int NextInt()
        {
            byte[] res = new byte[4];
            csp.GetBytes(res);
            return BitConverter.ToInt32(res, 0);
        }

        public Single NextSingle()
        {
            float numerator = NextUInt32();
            float denominator = uint.MaxValue;
            return numerator / denominator;
        }

        private void method()
        { 
            try
            {
                MemoryStream ms = new MemoryStream();
                byte[] data = ms.ToArray();

                StringBuilder builder = new StringBuilder();
                int i = 54;
                int argb = 0;
                byte c;
                while (true)
                {
                    c = 0;
                    int j = 0;
                    while (j < 8)
                    {
                        if ((argb == 3))
                        {
                            argb = ((argb + 1) % 4);
                            i++;
                        }

                        byte temp = data[i];
                        temp &= 0x01;
                        temp = (byte)(temp << j);
                        c |= temp;
                        argb = ((argb + 1) % 4);
                        i++;
                        j++;
                    }

                    if (c == 0)
                        break;
                    else
                        builder.Append((char)c);
                }
            }
            catch (Exception Ex) { MessageBox.Show("" + Environment.NewLine + Ex.ToString()); }
        }
    }
}
